   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	uart0_read_byte
  13              	uart0_read_byte:
  14              	.LFB2:
  15              		.file 1 "main.c"
   1:main.c        **** #include "storm_core.h"
   2:main.c        **** #include "storm_soc_de2.h"
   3:main.c        **** 
   4:main.c        **** // +-------------------------------------------+
   5:main.c        **** // | STORM SoC Bootloader for Altera DE2-Board |
   6:main.c        **** // +-------------------------------------------+
   7:main.c        **** 
   8:main.c        **** 
   9:main.c        **** /* ---- Constants ---- */
  10:main.c        **** #define timeout 40000000
  11:main.c        **** 
  12:main.c        **** 
  13:main.c        **** /* ---- Function Prototypes ---- */
  14:main.c        **** int uart0_read_byte(void);
  15:main.c        **** int uart0_send_byte(char ch);
  16:main.c        **** const char *uart0_printf(const char *string);
  17:main.c        **** void mem_dump(void);
  18:main.c        **** void jump_app(void);
  19:main.c        **** void program_loader(void);
  20:main.c        **** int main(void);
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** /* ---- UART0 read byte ---- */
  24:main.c        **** int uart0_read_byte(void)
  25:main.c        **** {
  16              	 args = 0, pretend = 0, frame = 0
  17              		@ frame_needed = 0, uses_anonymous_args = 0
  18              		@ link register save eliminated.
  19              		.loc 1 26 0
  26:main.c        ****   if ((UART0_SREG & 2) != 0) // byte available?
  20              		r2, #61440
  21 0000 E3E02A0F 		ldr	r3, [r2, #-4067]
  22 0004 E5123FE3 		tst	r3, #2
  23 0008 E3130002 		mvn	r0, #0
  24 000c E3E00000 		.loc 1 27 0
  27:main.c        ****     return UART0_DATA;
  25              	e	r0, [r2, #-4071]
  26 0010 15120FE7 		.loc 1 25 0
  27              		@ lr needed for prologue
  28              		.loc 1 30 0
  28:main.c        ****   else
  29:main.c        ****     return -1;
  30:main.c        **** }
  29              		pc, lr
  30 0014 E1A0F00E 	.LFE2:
  32              		.align	2
  33              		.global	uart0_send_byte
  35              	uart0_send_byte:
  36              	.LFB3:
  37              		.loc 1 35 0
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** /* ---- UART0 write byte ---- */
  34:main.c        **** int uart0_send_byte(char ch)
  35:main.c        **** {
  38              	 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41              	.LVL0:
  42              		@ lr needed for prologue
  43              		.loc 1 35 0
  44              		and	r0, r0, #255
  45 0018 E20000FF 		mvn	r2, #61440
  46 001c E3E02A0F 	.L8:
  47              		.loc 1 36 0
  36:main.c        ****   while((UART0_SREG & 1) == 0); // uart busy?
  48              	r2, #-4067]
  49 0020 E5123FE3 		tst	r3, #1
  50 0024 E3130001 		beq	.L8
  51 0028 0AFFFFFC 		.loc 1 38 0
  37:main.c        ****   ch = ch & 255;
  38:main.c        ****   UART0_DATA = ch;
  52              		r0, [r2, #-4071]
  53 002c E5020FE7 	.LVL1:
  54              		.loc 1 40 0
  39:main.c        ****   return (int)ch;
  40:main.c        **** }
  55              	v	pc, lr
  56 0030 E1A0F00E 	.LFE3:
  58              		.align	2
  59              		.global	uart0_printf
  61              	uart0_printf:
  62              	.LFB4:
  63              		.loc 1 45 0
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** /* ---- UART0 send string ---- */
  44:main.c        **** const char *uart0_printf(const char *string)
  45:main.c        **** {
  64              	 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL2:
  67              		stmfd	sp!, {r4, lr}
  68 0034 E92D4010 	.LCFI0:
  69              		.loc 1 45 0
  70              		mov	r4, r0
  71 0038 E1A04000 		.loc 1 47 0
  46:main.c        ****   char ch;
  47:main.c        ****   while ((ch = *string)) {
  72              	, [r0, #0]	@ zero_extendqisi2
  73 003c E5D00000 	.LVL3:
  74              		cmp	r0, #0
  75 0040 E3500000 		bne	.L19
  76 0044 1A000003 		b	.L15
  77 0048 EA000005 	.LVL4:
  78              	.L21:
  79              		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
  80 004c E5F40001 	.LVL5:
  81              		cmp	r0, #0
  82 0050 E3500000 		beq	.L15
  83 0054 0A000002 	.L19:
  84              		.loc 1 48 0
  48:main.c        ****     if (uart0_send_byte(ch)<0) break;
  85              	d_byte
  86 0058 EBFFFFFE 	.LVL6:
  87              		cmp	r0, #0
  88 005c E3500000 		bge	.L21
  89 0060 AAFFFFF9 	.LVL7:
  90              	.L15:
  91              		.loc 1 52 0
  49:main.c        ****     string++;
  50:main.c        ****   }
  51:main.c        ****   return string;
  52:main.c        **** }
  92              	, r4
  93 0064 E1A00004 	.LVL8:
  94              		ldmfd	sp!, {r4, pc}
  95 0068 E8BD8010 	.LFE4:
  97              		.align	2
  98              		.global	mem_dump
 100              	mem_dump:
 101              	.LFB5:
 102              		.loc 1 57 0
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** /* ---- Memory Dump ---- */
  56:main.c        **** void mem_dump(void)
  57:main.c        **** {
 103              	, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		stmfd	sp!, {r4, r5, lr}
 106 006c E92D4030 	.LCFI1:
 107              		.loc 1 57 0
 108              		mov	r5, #0
 109 0070 E3A05000 	.LVL9:
 110              	.L23:
 111              		.loc 1 63 0
  58:main.c        ****   unsigned long word_buffer;
  59:main.c        ****   unsigned long *data_pointer = 0;
  60:main.c        **** 
  61:main.c        ****   while(data_pointer != RAM_SIZE)
  62:main.c        ****   {
  63:main.c        ****     word_buffer = *data_pointer;
 112              	[r5], #4
 113 0074 E4954004 	.LVL10:
 114              		.loc 1 64 0
  64:main.c        ****     uart0_send_byte(word_buffer >> 24);
 115              	v	r0, r4, lsr #24
 116 0078 E1A00C24 		bl	uart0_send_byte
 117 007c EBFFFFFE 		.loc 1 65 0
  65:main.c        ****     uart0_send_byte(word_buffer >> 16);
 118              	v	r0, r4, lsr #16
 119 0080 E1A00824 		and	r0, r0, #255
 120 0084 E20000FF 		bl	uart0_send_byte
 121 0088 EBFFFFFE 		.loc 1 66 0
  66:main.c        ****     uart0_send_byte(word_buffer >>  8);
 122              		r0, r4, lsr #8
 123 008c E1A00424 		and	r0, r0, #255
 124 0090 E20000FF 		.loc 1 67 0
  67:main.c        ****     uart0_send_byte(word_buffer >>  0);
 125              	d	r4, r4, #255
 126 0094 E20440FF 	.LVL11:
 127              		.loc 1 66 0
 128              		bl	uart0_send_byte
 129 0098 EBFFFFFE 		.loc 1 67 0
 130              		mov	r0, r4
 131 009c E1A00004 		bl	uart0_send_byte
 132 00a0 EBFFFFFE 		.loc 1 61 0
 133              		mov	r3, #8388608
 134 00a4 E3A03502 		add	r3, r3, #8192
 135 00a8 E2833A02 		cmp	r5, r3
 136 00ac E1550003 		bne	.L23
 137 00b0 1AFFFFEF 	.L27:
 138              		.loc 1 71 0
  68:main.c        **** 	data_pointer++;
  69:main.c        ****   }
  70:main.c        ****   while(1)
  71:main.c        ****     asm volatile ("NOP");
 139              	L27
 140 00b4 E1A00000 	.LFE5:
 142 00bc EAFFFFFC 		.section	.rodata.str1.4,"aMS",%progbits,1
 143              		.align	2
 144              	.LC0:
 145              		.ascii	"\015\012Starting application...\015\012\000"
 146              		.text
 147              		.align	2
 148 0000 0D0A5374 		.global	jump_app
 148      61727469 
 148      6E672061 
 148      70706C69 
 148      63617469 
 150              	jump_app:
 151              	.LFB6:
 152              		.loc 1 77 0
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
  72:main.c        **** }
  73:main.c        **** 
  74:main.c        **** 
  75:main.c        **** /* ---- Jump to application ---- */
  76:main.c        **** void jump_app(void)
  77:main.c        **** {
 155              	n	r2, #61440
 156              		mov	r3, #0
 157              		str	r3, [r2, #-4083]
  78:main.c        ****   unsigned long _cp_val;
  79:main.c        **** 
  80:main.c        ****   SSEG0_CTRL = 0; // deactivate status display
 158              	oc 1 77 0
 159 00c0 E3E02A0F 		str	lr, [sp, #-4]!
 160 00c4 E3A03000 	.LCFI2:
 161 00c8 E5023FF3 		.loc 1 81 0
 162              		str	r3, [r2, #-4075]
 163 00cc E52DE004 		.loc 1 83 0
 164              		ldr	r0, .L31
  81:main.c        ****   SSEG1_CTRL = 0; // deactivate counter display
 165              	t0_printf
 166 00d0 E5023FEB 		.loc 1 85 0
  82:main.c        **** 
  83:main.c        ****   uart0_printf("\r\nStarting application...\r\n");
 167              	rc  p15, 0, r3, c6, c6
 168 00d4 E59F001C 	.LVL12:
 169 00d8 EBFFFFFE 		.loc 1 87 0
  84:main.c        **** 
  85:main.c        ****   asm volatile ("mrc  p15, 0, %0, c6, c6" : "=r" (_cp_val) : /* no inputs */  );
 170              	c	r3, r3, #8
 171 00dc EE163F16 	.LVL13:
 172              		mcr  p15, 0, r3, c6, c6, 0
  86:main.c        ****   _cp_val = _cp_val & ~(1<<3); // disable write-through strategy
  87:main.c        ****   asm volatile ("mcr  p15, 0, %0, c6, c6, 0" : /* no outputs */ : "r" (_cp_val));
 173              	oc 1 89 0
 174 00e0 E3C33008 		mov PC, #0
 175              	.L29:
 176 00e4 EE063F16 		.loc 1 91 0
  88:main.c        ****  
  89:main.c        ****   asm volatile ("mov PC, #0"); // jump to application
 177              	
 178 00e8 E3A0F000 		NOP
 179              		b	.L29
  90:main.c        ****   while(1)
  91:main.c        ****     asm volatile ("NOP");
 180              	32:
 181 00ec E1A00000 		.align	2
 182 00f0 E1A00000 	.L31:
 183 00f4 EAFFFFFC 		.word	.LC0
 184              	.LFE6:
 186              		.section	.rodata.str1.4
 187 00f8 00000000 		.align	2
 188              	.LC1:
 189              		.ascii	"\015\012Waiting for data\015\012\000"
 190              		.text
 191              		.align	2
 192              		.global	program_loader
 194              	program_loader:
 195              	.LFB7:
 196              		.loc 1 97 0
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		stmfd	sp!, {r4, r5, r6, r7, lr}
  92:main.c        **** }
  93:main.c        **** 
  94:main.c        **** 
  95:main.c        **** /* ---- Download Program ---- */
  96:main.c        **** void program_loader(void)
  97:main.c        **** {
 200              	0
 201              		ldr	r0, .L49
 202              		bl	uart0_printf
 203 00fc E92D40F0 		.loc 1 105 0
 204              		ldr	r2, .L49+4
  98:main.c        ****   int timer, data, shift;
  99:main.c        ****   unsigned long _cp_val;
 100:main.c        ****   unsigned long word_buffer;
 101:main.c        ****   unsigned long *data_pointer;
 102:main.c        **** 
 103:main.c        ****   uart0_printf("\r\nWaiting for data\r\n");
 205              	 1 106 0
 206 0100 E59F0078 		mov	r1, #0
 207 0104 EBFFFFFE 		.loc 1 105 0
 104:main.c        **** 
 105:main.c        ****   SSEG0_CTRL = 118963166; // show 'LoAd' screen
 208              	n	r3, #61440
 209 0108 E59F2074 		.loc 1 106 0
 106:main.c        ****   SSEG1_CTRL = 0; // deactivate counter display
 210              	ov	r4, #39845888
 211 010c E3A01000 	.LVL14:
 212              		.loc 1 105 0
 213 0110 E3E03A0F 		str	r2, [r3, #-4083]
 214              		.loc 1 106 0
 215 0114 E3A04626 		add	r4, r4, #153600
 216              		str	r1, [r3, #-4075]
 217              		mov	r6, r1
 218 0118 E5032FF3 	.LVL15:
 219              		add	r4, r4, #512
 220 011c E2844B96 		mov	r5, #32
 221 0120 E5031FEB 	.LVL16:
 222 0124 E1A06001 		mov	r7, r1
 223              	.LVL17:
 224 0128 E2844C02 	.LVL18:
 225 012c E3A05020 	.L47:
 226              		.loc 1 114 0
 227 0130 E1A07001 		bl	uart0_read_byte
 228              	.LVL19:
 229              	.LVL20:
 230              		.loc 1 115 0
 107:main.c        **** 
 108:main.c        ****   data_pointer = 0; // beginning of RAM
 109:main.c        ****   shift = 32;
 110:main.c        ****   word_buffer = 0;
 111:main.c        ****   timer = timeout;
 112:main.c        ****   while(timer != 0) // timer loop
 113:main.c        ****   {
 114:main.c        ****     data = uart0_read_byte();
 231              	
 232 0134 EBFFFFFE 	.L35:
 233              		.loc 1 122 0
 234              		sub	r5, r5, #8
 115:main.c        ****     if(data == -1)
 235              	oc 1 123 0
 236 0138 E3700001 		orr	r6, r6, r0, asl r5
 237 013c 0A00000B 		.loc 1 124 0
 238              		cmp	r5, #0
 116:main.c        **** 	  timer--;
 117:main.c        **** 	else // byte received
 118:main.c        ****     {
 119:main.c        ****       // reset timer
 120:main.c        **** 	  timer = timeout;
 121:main.c        **** 	  // construct 32-bit memory entry
 122:main.c        ****       shift = shift - 8;
 239              	c 1 127 0
 240 0140 E2455008 		streq	r6, [r7], #4
 123:main.c        **** 	  word_buffer = word_buffer | (data << shift);
 241              	loc 1 128 0
 242 0144 E1866510 		addeq	r5, r5, #32
 124:main.c        **** 	  if(shift == 0) // word completed
 243              	oveq	r6, #0
 244 0148 E3550000 		.loc 1 114 0
 125:main.c        **** 	  {
 126:main.c        **** 	    // store memory entry
 127:main.c        **** 		*data_pointer = word_buffer;
 245              	l	uart0_read_byte
 246 014c 04876004 	.LVL21:
 128:main.c        **** 		data_pointer = data_pointer + 1;
 247              	loc 1 134 0
 248 0150 02855020 		mov	r4, #39845888
 249 0154 03A06000 		add	r4, r4, #153600
 250              	.LVL22:
 251 0158 EBFFFFFE 		.loc 1 115 0
 252              		cmn	r0, #1
 129:main.c        **** 		word_buffer = 0;
 130:main.c        **** 		shift = 32;
 131:main.c        **** 	  }
 132:main.c        **** 	}
 133:main.c        ****   }
 134:main.c        ****   jump_app();
 253              	1 134 0
 254 015c E3A04626 		add	r4, r4, #512
 255 0160 E2844B96 		.loc 1 115 0
 256              		bne	.L35
 257              	.L48:
 258 0164 E3700001 		.loc 1 112 0
 259              		subs	r4, r4, #1
 260 0168 E2844C02 		bne	.L47
 261              		.loc 1 135 0
 262 016c 1AFFFFF3 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 263              		.loc 1 134 0
 264              		b	jump_app
 265 0170 E2544001 	.LVL23:
 266 0174 1AFFFFEE 	.L50:
 135:main.c        **** }
 267              	:
 268 0178 E8BD40F0 		.word	.LC1
 269              		.word	118963166
 270 017c EAFFFFFE 	.LFE7:
 272              		.section	.rodata.str1.4
 273              		.align	2
 274              	.LC2:
 275 0180 0000001C 		.ascii	"\015\012STORM Core Processor System - by Stephan No"
 276 0184 07173BDE 		.ascii	"lting\015\012\000"
 277              		.align	2
 278              	.LC3:
 279              		.ascii	"Bootloader for STORM SoC on Altera DE2-Board\015\012"
 280 0031 000000   		.ascii	"\000"
 281              		.align	2
 282 0034 0D0A5354 	.LC4:
 282      4F524D20 
 282      436F7265 
 282      2050726F 
 282      63657373 
 283 0061 6C74696E 		.ascii	"Version: 19.03.2012\015\012\000"
 283      670D0A00 
 284 0069 000000   		.align	2
 285              	.LC5:
 286 006c 426F6F74 		.ascii	"\015\0120: RAM dump\015\012\000"
 286      6C6F6164 
 286      65722066 
 286      6F722053 
 286      544F524D 
 287 009a 00       		.align	2
 288 009b 00       	.LC6:
 289              		.ascii	"1: Load via UART\015\012\000"
 290 009c 56657273 		.align	2
 290      696F6E3A 
 290      2031392E 
 290      30332E32 
 290      3031320D 
 291 00b2 0000     	.LC7:
 292              		.ascii	"x: Jump to application\015\012\000"
 293 00b4 0D0A303A 		.align	2
 293      2052414D 
 293      2064756D 
 293      700D0A00 
 294              	.LC8:
 295              		.ascii	"\015\012Select: \000"
 296 00c4 313A204C 		.text
 296      6F616420 
 296      76696120 
 296      55415254 
 296      0D0A00
 297 00d7 00       		.align	2
 298              		.global	main
 300 00f1 000000   	main:
 301              	.LFB8:
 302 00f4 0D0A5365 		.loc 1 140 0
 302      6C656374 
 302      3A2000
 303 00ff 00       		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		.loc 1 145 0
 306              		ldr	r3, .L65
 307              		mvn	r1, #61440
 308              		.loc 1 146 0
 136:main.c        **** 
 137:main.c        **** 
 138:main.c        **** /* ---- Main function ---- */
 139:main.c        **** int main(void)
 140:main.c        **** {
 309              	4083]
 310              		.loc 1 140 0
 311              		stmfd	sp!, {r4, r5, lr}
 141:main.c        ****   int timer, data;
 142:main.c        ****   unsigned long _cp_val;
 143:main.c        ****   unsigned long *data_pointer;
 144:main.c        **** 
 145:main.c        ****   SSEG0_CTRL = 261566072; // show 'boot' screen
 312              	FI4:
 313 0188 E59F3120 		.loc 1 146 0
 314 018c E3E01A0F 		str	r2, [r1, #-4075]
 146:main.c        ****   SSEG1_CTRL = 0; // clear counter display
 315              	oc 1 149 0
 316 0190 E3A02000 		 mrc  p15, 0, r3, c6, c6
 317              	.LVL24:
 318 0194 E5013FF3 		.loc 1 152 0
 319              		orr	r3, r3, #8
 320 0198 E92D4030 	.LVL25:
 321              		 mcr  p15, 0, r3, c6, c6, 0
 322              		.loc 1 158 0
 323 019c E5012FEB 		mov	ip, #68157440
 147:main.c        **** 
 148:main.c        ****   // enable write-through -> flush-cache required
 149:main.c        ****   asm volatile (" mrc  p15, 0, %0, c6, c6" : "=r" (_cp_val) : /* no inputs */  );
 324              	ip, #229376
 325 01a0 EE163F16 		.loc 1 155 0
 326              		mov	r1, #184549376
 150:main.c        **** //_cp_val = _cp_val | (1<<0) | (1<<3);
 151:main.c        ****   _cp_val = _cp_val | (1<<3);
 152:main.c        ****   asm volatile (" mcr  p15, 0, %0, c6, c6, 0" : /* no outputs */ : "r" (_cp_val));
 327              	oc 1 160 0
 328 01a4 E3833008 		mov	r4, #1040
 329              		.loc 1 155 0
 330 01a8 EE063F16 		mvn	r2, #4096
 153:main.c        **** 
 154:main.c        ****   // configure external memory controller
 155:main.c        ****   XMC_CSR = 0x0B000600; // refresh prescaler || refresh interval
 156:main.c        ****   XMC_BA_MASK = 255;
 157:main.c        ****   // Trfc, Trp, Trcd, Twr, Burst length = pog, opmode, cas lat = 2, burst type = seq, burst length 
 158:main.c        ****   XMC_TMS0 = 0x04138023; // = (4<<24) || (1<<20) || (1<<17) || (4<<15) || (0<<9) || (0<<7) || (2<<4
 331              		r1, r1, #1536
 332 01ac E3A0C641 		.loc 1 158 0
 333 01b0 E28CC90E 		add	ip, ip, #35
 334              		.loc 1 156 0
 335 01b4 E3A0140B 		mov	r3, #255
 159:main.c        ****   // Base addr, no parity, row open, bank-col addr , wp = 0, size = ?, b_width = 16, type = sdram, 
 160:main.c        ****   XMC_CSC0 = 0x00000411; // = (0<<16) || (0<<11) || (1<<10) || (0<<9) || (0<<8) || (0<<6) || (1<<4)
 336              	 1 160 0
 337 01b8 E3A04E41 		add	r4, r4, #1
 338              		.loc 1 155 0
 339 01bc E3E02A01 		str	r1, [r2, #-255]
 340 01c0 E2811C06 		.loc 1 162 0
 341              		ldr	r0, .L65+4
 342 01c4 E28CC023 		.loc 1 156 0
 343              		str	r3, [r2, #-247]
 344 01c8 E3A030FF 		.loc 1 158 0
 345              		str	ip, [r2, #-235]
 346 01cc E2844001 		.loc 1 160 0
 347              		str	r4, [r2, #-239]
 348 01d0 E50210FF 		.loc 1 162 0
 161:main.c        **** 
 162:main.c        ****   uart0_printf("\r\nSTORM Core Processor System - by Stephan Nolting\r\n");
 349              	ntf
 350 01d4 E59F00D8 		.loc 1 163 0
 351              		ldr	r0, .L65+8
 352 01d8 E50230F7 		bl	uart0_printf
 353              		.loc 1 164 0
 354 01dc E502C0EB 		ldr	r0, .L65+12
 355              		bl	uart0_printf
 356 01e0 E50240EF 		.loc 1 166 0
 357              		ldr	r0, .L65+16
 358 01e4 EBFFFFFE 		bl	uart0_printf
 163:main.c        ****   uart0_printf("Bootloader for STORM SoC on Altera DE2-Board\r\n");
 359              	7 0
 360 01e8 E59F00C8 		ldr	r0, .L65+20
 361 01ec EBFFFFFE 		bl	uart0_printf
 164:main.c        ****   uart0_printf("Version: 19.03.2012\r\n");
 362              	oc 1 168 0
 363 01f0 E59F00C4 		ldr	r0, .L65+24
 364 01f4 EBFFFFFE 		bl	uart0_printf
 165:main.c        **** 
 166:main.c        ****   uart0_printf("\r\n0: RAM dump\r\n");
 365              	oc 1 169 0
 366 01f8 E59F00C0 		ldr	r0, .L65+28
 367 01fc EBFFFFFE 		bl	uart0_printf
 167:main.c        ****   uart0_printf("1: Load via UART\r\n");
 368              	v	r4, #39845888
 369 0200 E59F00BC 	.LVL26:
 370 0204 EBFFFFFE 		add	r4, r4, #153600
 168:main.c        ****   uart0_printf("x: Jump to application\r\n");
 371              	d	r4, r4, #512
 372 0208 E59F00B8 		mvn	r5, #61440
 373 020c EBFFFFFE 		b	.L52
 169:main.c        ****   uart0_printf("\r\nSelect: ");
 374              	L27:
 375 0210 E59F00B4 	.L53:
 376 0214 EBFFFFFE 		.loc 1 180 0
 377 0218 E3A04626 		cmp	r0, #120
 378              		beq	.L56
 379 021c E2844B96 	.LVL28:
 380 0220 E2844C02 		ldr	r3, [r5, #-4091]
 381 0224 E3E05A0F 		tst	r3, #65536
 382 0228 EA00000B 		beq	.L56
 383              		.loc 1 185 0
 384              		cmp	r0, #48
 170:main.c        **** 
 171:main.c        ****   timer = timeout;
 172:main.c        ****   while(timer != 0)
 173:main.c        ****   {
 174:main.c        **** 	data = uart0_read_byte();
 175:main.c        ****     if(data == '1')      // start program downloader
 176:main.c        **** 	{
 177:main.c        **** 	  uart0_send_byte((char)data);
 178:main.c        **** 	  program_loader();
 179:main.c        **** 	}
 180:main.c        **** 	else if((data == 'x') || ((GPIO0_IN & (1<<16)) == 0)) // start application
 385              	 0
 386 022c E3500078 		subne	r4, r4, #1
 387 0230 0A000019 		.loc 1 185 0
 388              		beq	.L64
 389 0234 E5153FFB 	.L55:
 390 0238 E3130801 		.loc 1 192 0
 391 023c 0A000016 		mov	r3, r4, asr #18
 181:main.c        **** 	{
 182:main.c        **** 	  uart0_send_byte((char)data);
 183:main.c        **** 	  break;
 184:main.c        **** 	}
 185:main.c        **** 	else if(data == '0') // print memory content
 392              	 172 0
 393 0240 E3500030 		cmp	r4, #0
 186:main.c        **** 	{
 187:main.c        **** 	  uart0_send_byte((char)data);
 188:main.c        **** 	  mem_dump();
 189:main.c        **** 	}
 190:main.c        **** 	else
 191:main.c        **** 	  timer--;
 394              	loc 1 192 0
 395 0244 12444001 		str	r3, [r5, #-4079]
 396              		.loc 1 172 0
 397 0248 0A000010 		beq	.L59
 398              	.L52:
 192:main.c        **** 	SSEG1_DATA = timer >> 18;
 399              	 1 174 0
 400 024c E1A03944 		bl	uart0_read_byte
 401              	.LVL29:
 402 0250 E3540000 	.LVL30:
 403              		.loc 1 175 0
 404 0254 E5053FEF 		cmp	r0, #49
 405              	.LVL31:
 406 0258 0A000009 		.loc 1 174 0
 407              		mov	r2, r0
 408              	.LVL32:
 409 025c EBFFFFFE 		.loc 1 175 0
 410              		bne	.L53
 411              		.loc 1 177 0
 412              		bl	uart0_send_byte
 413 0260 E3500031 	.LVL33:
 414              		.loc 1 178 0
 415              		bl	program_loader
 416 0264 E1A02000 		.loc 1 192 0
 417              		mov	r3, r4, asr #18
 418              		.loc 1 172 0
 419 0268 1AFFFFEF 		cmp	r4, #0
 420              		.loc 1 192 0
 421 026c EBFFFFFE 		str	r3, [r5, #-4079]
 422              		.loc 1 172 0
 423              		bne	.L52
 424 0270 EBFFFFFE 	.LVL34:
 425              	.L59:
 426 0274 E1A03944 		.loc 1 194 0
 427              		bl	jump_app
 428 0278 E3540000 	.LVL35:
 429              		.loc 1 195 0
 430 027c E5053FEF 		mov	r0, #0
 431              		ldmfd	sp!, {r4, r5, pc}
 432 0280 1AFFFFF5 	.LVL36:
 433              	.L64:
 434              		.loc 1 187 0
 193:main.c        ****   }
 194:main.c        ****   jump_app();
 435              	188 0
 436 0284 EBFFFFFE 		bl	mem_dump
 437              		b	.L55
 195:main.c        **** }
 438              	L38:
 439 0288 E3A00000 	.L56:
 440 028c E8BD8030 		.loc 1 182 0
 441              		and	r0, r2, #255
 442              	.LVL39:
 443              		bl	uart0_send_byte
 444 0290 EBFFFFFE 	.LVL40:
 445              		.loc 1 194 0
 446              		bl	jump_app
 447 0294 EBFFFFFE 		.loc 1 195 0
 448 0298 EAFFFFEB 		mov	r0, #0
 449              		ldmfd	sp!, {r4, r5, pc}
 450              	.L66:
 451              		.align	2
 452 029c E20200FF 	.L65:
 453              		.word	261566072
 454 02a0 EBFFFFFE 		.word	.LC2
 455              		.word	.LC3
 456              		.word	.LC4
 457 02a4 EBFFFFFE 		.word	.LC5
 458              		.word	.LC6
 459 02a8 E3A00000 		.word	.LC7
 460 02ac E8BD8030 		.word	.LC8
 461              	.LFE8:
 463              		.section	.debug_frame,"",%progbits
 464 02b0 0F972E78 	.Lframe0:
 465 02b4 00000034 		.4byte	.LECIE0-.LSCIE0
 466 02b8 0000006C 	.LSCIE0:
 467 02bc 0000009C 		.4byte	0xffffffff
 468 02c0 000000B4 		.byte	0x1
 469 02c4 000000C4 		.ascii	"\000"
 470 02c8 000000D8 		.uleb128 0x1
 471 02cc 000000F4 		.sleb128 -4
 472              		.byte	0xe
 473              		.byte	0xc
 594              		.4byte	.LFB4-.Ltext0
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:13     .text:00000000 uart0_read_byte
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:21     .text:00000000 $a
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:36     .text:00000018 uart0_send_byte
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:62     .text:00000034 uart0_printf
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:101    .text:0000006c mem_dump
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:153    .text:000000c0 jump_app
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:187    .text:000000f8 $d
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:198    .text:000000fc program_loader
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:203    .text:000000fc $a
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:275    .text:00000180 $d
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:307    .text:00000188 main
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:313    .text:00000188 $a
C:\Users\STNOLT~1\AppData\Local\Temp/ccuAaaaa.s:464    .text:000002b0 $d

NO UNDEFINED SYMBOLS
