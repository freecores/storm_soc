   1              	# 1 "build/storm_startup_code.S"
   2              	# 1 "<built-in>"
   1              	        .global main                    // int main(void)
   0              	
   0              	
   2              	
   3              	        .global _etext                  // -> .data initial values in ROM
   4              	        .global _data                   // -> .data area in RAM
   5              	        .global _edata                  // end of .data area
   6              	        .global __bss_start             // -> .bss area in RAM
   7              	        .global __bss_end__             // end of .bss area
   8              	        .global _stack                  // top of stack
   9              	
  10              	// Stack Sizes
  11              	        .set  UND_STACK_SIZE, 0x00000080
  12              	        .set  ABT_STACK_SIZE, 0x00000080
  13              	        .set  FIQ_STACK_SIZE, 0x00000080
  14              	        .set  IRQ_STACK_SIZE, 0X00000080
  15              	        .set  SVC_STACK_SIZE, 0x00000080
  16              	
  17              	// Standard definitions of Mode bits and Interrupt flags in MSRs
  18              	        .set  MODE_USR, 0x10            // User Mode
  19              	        .set  MODE_FIQ, 0x11            // FIQ Mode
  20              	        .set  MODE_IRQ, 0x12            // IRQ Mode
  21              	        .set  MODE_SVC, 0x13            // Supervisor Mode
  22              	        .set  MODE_ABT, 0x17            // Abort Mode
  23              	        .set  MODE_UND, 0x1B            // Undefined Mode
  24              	        .set  MODE_SYS, 0x1F            // System Mode
  25              	
  26              	        .equ  FIQ_BIT, 0x40             // when FIQ bit is set, FIQ is disabled
  27              	        .equ  IRQ_BIT, 0x80             // when IRQ bit is set, IRQ is disabled
  28              	
  29              	        .text
  30              	        .code 32
  31              	        .align 2
  32              	
  33              	        .global _boot
  34              	        .func   _boot
  35              	_boot:
  36              	
  37              	// Runtime Interrupt Vectors
  38              	// -------------------------------------------------------------------
  39              	Vectors:
  40 0000 EAFFFFFE 	        b     _start                    // reset - _start
  41 0004 E59FF014 	        ldr   pc,_undf                  // undefined - _undf
  42 0008 E59FF014 	        ldr   pc,_swi                   // SWI - _swi
  43 000c E59FF014 	        ldr   pc,_pabt                  // program abort - _pabt
  44 0010 E59FF014 	        ldr   pc,_dabt                  // data abort - _dabt
  45 0014 E1A00000 	        nop                             // reserved
  46 0018 E51FFFF0 	        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
  47 001c E59FF010 	        ldr   pc,_fiq                   // FIQ - _fiq
  48              	
  49              	
  50              	// Use this group for development
  51 0020 00000038 	_undf:  .word __undf                    // undefined
  52 0024 0000003C 	_swi:   .word __swi                     // SWI
  53 0028 00000040 	_pabt:  .word __pabt                    // program abort
  54 002c 00000044 	_dabt:  .word __dabt                    // data abort
  55 0030 00000048 	_irq:   .word __irq                     // IRQ
  56 0034 0000004C 	_fiq:   .word __fiq                     // FIQ
  57              	
  58 0038 EAFFFFFE 	__undf: b     .                         // undefined
  59 003c EAFFFFFE 	__swi:  b     .                         // SWI
  60 0040 EAFFFFFE 	__pabt: b     .                         // program abort
  61 0044 EAFFFFFE 	__dabt: b     .                         // data abort
  62 0048 EAFFFFFE 	__irq:  b     .                         // IRQ
  63 004c EAFFFFFE 	__fiq:  b     .                         // FIQ
  64              	
  66              	        .endfunc
  67              	
  68              	
  69              	// Setup the operating mode & stack.
  70              	// -------------------------------------------------------------------
  71              	        .global _start, start, _mainCRTStartup
  72              	        .func   _start
  73              	
  74              	_start:
  75              	start:
  76              	_mainCRTStartup:
  77              	
  78              	// Who am I? Where am I going?
  79              	
  80              	// Initialize Interrupt System
  81              	// - Set stack location for each mode
  82              	// - Leave in System Mode with Interrupts Disabled
  83              	// ----------------------------------------------------
  84 0050 E59F00C8 	        ldr   r0,=_stack                    // Calc stack base
  85 0054 E10F1000 			mrs   r1,CPSR
  86 0058 E3C1107F 			bic   r1,r1,#0x7F
  87 005c E38110DB 			orr   r1,r1,#MODE_UND|IRQ_BIT|FIQ_BIT  // Change to Undefined Instruction mode
  88 0060 E129F001 	        msr   CPSR,r1
  89 0064 E1A0D000 	        mov   sp,r0                         // Store stack base
  90              	
  91 0068 E2400080 	        sub   r0,r0,#UND_STACK_SIZE         // Calc stack base
  92 006c E10F1000 			mrs   r1,CPSR
  93 0070 E3C1107F 			bic   r1,r1,#0x7F
  94 0074 E38110D7 	        orr   r1,r1,#MODE_ABT|IRQ_BIT|FIQ_BIT  // Change to Abort Mode
  95 0078 E129F001 	        msr   CPSR,r1
  96 007c E1A0D000 	        mov   sp,r0                         // Store stack base
  97              	
  98 0080 E2400080 	        sub   r0,r0,#ABT_STACK_SIZE         // Calc stack base
  99 0084 E10F1000 			mrs   r1,CPSR
 100 0088 E3C1107F 			bic   r1,r1,#0x7F
 101 008c E38110D1 	        orr   r1,r1,#MODE_FIQ|IRQ_BIT|FIQ_BIT  // Change to FIQ Mode
 102 0090 E129F001 	        msr   CPSR,r1
 103 0094 E1A0D000 	        mov   sp,r0                         // Store stack base
 104              	
 105 0098 E2400080 	        sub   r0,r0,#FIQ_STACK_SIZE         // Calc stack base
 106 009c E10F1000 			mrs   r1,CPSR
 107 00a0 E3C1107F 			bic   r1,r1,#0x7F
 108 00a4 E38110D2 	        orr   r1,r1,#MODE_IRQ|IRQ_BIT|FIQ_BIT  // Change to IRQ Mode
 109 00a8 E129F001 	        msr   CPSR,r1
 110 00ac E1A0D000 	        mov   sp,r0                         // Store stack base
 111              	
 112 00b0 E2400080 	        sub   r0,r0,#IRQ_STACK_SIZE         // Calc stack base
 113 00b4 E10F1000 			mrs   r1,CPSR
 114 00b8 E3C1107F 			bic   r1,r1,#0x7F
 115 00bc E38110D3 	        orr   r1,r1,#MODE_SVC|IRQ_BIT|FIQ_BIT  // Change to Supervisor Mode
 116 00c0 E129F001 	        msr   CPSR,r1
 117 00c4 E1A0D000 	        mov   sp,r0                         // Store stack base
 118              	
 119 00c8 E2400080 	        sub   r0,r0,#SVC_STACK_SIZE         // Calc stack base
 120 00cc E10F1000 			mrs   r1,CPSR
 121 00d0 E3C1107F 			bic   r1,r1,#0x7F
 122 00d4 E38110DF 	        orr   r1,r1,#MODE_SYS|IRQ_BIT|FIQ_BIT  // Change to System Mode
 123 00d8 E129F001 	        msr   CPSR,r1
 124 00dc E1A0D000 	        mov   sp,r0                         // Store stack base
 125              	
 126              	// Copy initialized data to its execution address in RAM
 127              	// -------------------------------------------------------------------
 128              	#ifdef ROM_RUN
 129              	        ldr   r1,=_etext                // -> ROM data start
 130              	        ldr   r2,=_data                 // -> data start
 131              	        ldr   r3,=_edata                // -> end of data
 132              	x01:    cmp   r2,r3                     // check if data to move
 133              			beq   y01
 134              	        ldrlo r0,[r1],#4                // copy it
 135              	        strlo r0,[r2],#4
 136              	        blo   x01                       // loop until done
 137              	y01:
 138              	#endif
 139              	// Clear .bss
 140              	// ----------
 141 00e0 E3A00000 	        mov   r0,#0                     // get a zero
 142 00e4 E59F1038 	        ldr   r1,=__bss_start           // -> bss start
 143 00e8 E59F2038 	        ldr   r2,=__bss_end__           // -> bss end
 144 00ec E1510002 	x02:    cmp   r1,r2                     // check if data to clear
 145 00f0 0A000001 			beq   y02
 146 00f4 34810004 	        strlo r0,[r1],#4                // clear 4 bytes
 147 00f8 3AFFFFFB 	        blo   x02                       // loop until done
 148              	y02:
 149              	// Call main program: main(0)
 150              	// --------------------------
 151 00fc E3A00000 	        mov   r0,#0                     // no arguments (argc = 0)
 152 0100 E1A01000 	        mov   r1,r0
 153 0104 E1A02000 	        mov   r2,r0
 154 0108 E1A0B000 	        mov   fp,r0                     // null frame pointer
 155 010c E1A07000 	        mov   r7,r0                     // null frame pointer for thumb
 156 0110 E59FA014 	        ldr   r10,=main
 157 0114 E1A0E00F 	        mov   lr,pc
 158 0118 E1A0F00A 	        mov   pc, r10                   // enter main()
 159              	
 161              	        .endfunc
 162              	
 163              	        .global _reset, reset, exit, abort
 164              	        .func   _reset
 165              	_reset:
 166              	reset:
 167              	exit:
 168              	abort:
 169              	
 170 011c EAFFFFFE 	        b     .                         // loop until reset
 171              	
 173              	        .endfunc
 174              	
 175 0120 00000000 	        .end
 175      00000000 
 175      00000000 
 175      00000000 
DEFINED SYMBOLS
                            *ABS*:00000000 build/storm_startup_code.S
build/storm_startup_code.S:11     *ABS*:00000080 UND_STACK_SIZE
build/storm_startup_code.S:12     *ABS*:00000080 ABT_STACK_SIZE
build/storm_startup_code.S:13     *ABS*:00000080 FIQ_STACK_SIZE
build/storm_startup_code.S:14     *ABS*:00000080 IRQ_STACK_SIZE
build/storm_startup_code.S:15     *ABS*:00000080 SVC_STACK_SIZE
build/storm_startup_code.S:18     *ABS*:00000010 MODE_USR
build/storm_startup_code.S:19     *ABS*:00000011 MODE_FIQ
build/storm_startup_code.S:20     *ABS*:00000012 MODE_IRQ
build/storm_startup_code.S:21     *ABS*:00000013 MODE_SVC
build/storm_startup_code.S:22     *ABS*:00000017 MODE_ABT
build/storm_startup_code.S:23     *ABS*:0000001b MODE_UND
build/storm_startup_code.S:24     *ABS*:0000001f MODE_SYS
build/storm_startup_code.S:26     *ABS*:00000040 FIQ_BIT
build/storm_startup_code.S:27     *ABS*:00000080 IRQ_BIT
build/storm_startup_code.S:30     .text:00000000 $a
build/storm_startup_code.S:35     .text:00000000 _boot
build/storm_startup_code.S:39     .text:00000000 Vectors
build/storm_startup_code.S:74     .text:00000050 _start
build/storm_startup_code.S:51     .text:00000020 _undf
build/storm_startup_code.S:52     .text:00000024 _swi
build/storm_startup_code.S:53     .text:00000028 _pabt
build/storm_startup_code.S:54     .text:0000002c _dabt
build/storm_startup_code.S:56     .text:00000034 _fiq
build/storm_startup_code.S:51     .text:00000020 $d
build/storm_startup_code.S:58     .text:00000038 __undf
build/storm_startup_code.S:59     .text:0000003c __swi
build/storm_startup_code.S:60     .text:00000040 __pabt
build/storm_startup_code.S:61     .text:00000044 __dabt
build/storm_startup_code.S:55     .text:00000030 _irq
build/storm_startup_code.S:62     .text:00000048 __irq
build/storm_startup_code.S:63     .text:0000004c __fiq
build/storm_startup_code.S:58     .text:00000038 $a
build/storm_startup_code.S:75     .text:00000050 start
build/storm_startup_code.S:76     .text:00000050 _mainCRTStartup
build/storm_startup_code.S:144    .text:000000ec x02
build/storm_startup_code.S:148    .text:000000fc y02
build/storm_startup_code.S:165    .text:0000011c _reset
build/storm_startup_code.S:166    .text:0000011c reset
build/storm_startup_code.S:167    .text:0000011c exit
build/storm_startup_code.S:168    .text:0000011c abort
build/storm_startup_code.S:175    .text:00000120 $d

UNDEFINED SYMBOLS
main
_etext
_data
_edata
__bss_start
__bss_end__
_stack
