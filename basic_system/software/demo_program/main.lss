
main.elf:     file format elf32-bigarm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00004000  00000c00  00000c00  00008b30  2**0
                  ALLOC
  2 .comment      0000001b  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00008b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000231  00000000  00000000  00008b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e26  00000000  00000000  00008dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000284  00000000  00000000  00009be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  00009e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  0000a244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  0000a484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f4  00000000  00000000  0000a763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000ae57  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_boot>:

// Runtime Interrupt Vectors
// -------------------------
Vectors:
        b     _start                    // reset - _start
   0:	ea000012 	b	50 <_mainCRTStartup>
        b     und_handler               // undefined - _undf
   4:	ea000062 	b	194 <und_handler>
        b     swi_handler               // SWI - _swi
   8:	ea000055 	b	164 <swi_handler>
        b     iab_handler               // program abort - _pabt
   c:	ea000048 	b	134 <iab_handler>
        b     iab_handler               // data abort - _dabt
  10:	ea000047 	b	134 <iab_handler>
        nop                             // reserved
  14:	e1a00000 	nop			(mov r0,r0)
        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
  18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <_stack+0xffffa430>
        ldr   pc,[pc,#-0xFF0]           // FIQ - read the VIC
  1c:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff034 <_stack+0xffffa434>

00000020 <_undf>:
  20:	00000038 	andeq	r0, r0, r8, lsr r0

00000024 <_swi>:
  24:	0000003c 	andeq	r0, r0, ip, lsr r0

00000028 <_pabt>:
  28:	00000040 	andeq	r0, r0, r0, asr #32

0000002c <_dabt>:
  2c:	00000044 	andeq	r0, r0, r4, asr #32

00000030 <_irq>:
  30:	00000048 	andeq	r0, r0, r8, asr #32

00000034 <_fiq>:
  34:	0000004c 	andeq	r0, r0, ip, asr #32

00000038 <__undf>:

#if 0
// Use this group for production
_undf:  .word _reset                    // undefined - _reset
_swi:   .word _reset                    // SWI - _reset
_pabt:  .word _reset                    // program abort - _reset
_dabt:  .word _reset                    // data abort - _reset
_irq:   .word _reset                    // IRQ - _reset
_fiq:   .word _reset                    // FIQ - _reset

#else
// Use this group for development
_undf:  .word __undf                    // undefined
_swi:   .word __swi                     // SWI
_pabt:  .word __pabt                    // program abort
_dabt:  .word __dabt                    // data abort
_irq:   .word __irq                     // IRQ
_fiq:   .word __fiq                     // FIQ

__undf: b     .                         // undefined
  38:	eafffffe 	b	38 <__undf>

0000003c <__swi>:
__swi:  b     .                         // SWI
  3c:	eafffffe 	b	3c <__swi>

00000040 <__pabt>:
__pabt: b     .                         // program abort
  40:	eafffffe 	b	40 <__pabt>

00000044 <__dabt>:
__dabt: b     .                         // data abort
  44:	eafffffe 	b	44 <__dabt>

00000048 <__irq>:
__irq:  b     .                         // IRQ
  48:	eafffffe 	b	48 <__irq>

0000004c <__fiq>:
__fiq:  b     .                         // FIQ
  4c:	eafffffe 	b	4c <__fiq>

00000050 <_mainCRTStartup>:
#endif
        .size _boot, . - _boot
        .endfunc


// Setup the operating mode & stack.
// ---------------------------------
        .global _start, start, _mainCRTStartup
        .func   _start

_start:
start:
_mainCRTStartup:

// Initialize Interrupt System
// - Set stack location for each mode
// - Leave in System Mode with Interrupts Disabled
// -----------------------------------------------
        ldr   r0,=_stack                    // Calc stack base
  50:	e59f0228 	ldr	r0, [pc, #552]	; 280 <.text+0x280>
		mrs   r1,CPSR
  54:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  58:	e3c1107f 	bic	r1, r1, #127	; 0x7f
		orr   r1,r1,#MODE_UND|IRQ_BIT|FIQ_BIT  // Change to Undefined Instruction mode
  5c:	e38110db 	orr	r1, r1, #219	; 0xdb
        msr   CPSR,r1
  60:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  64:	e1a0d000 	mov	sp, r0

        sub   r0,r0,#UND_STACK_SIZE         // Calc stack base
  68:	e2400004 	sub	r0, r0, #4	; 0x4
		mrs   r1,CPSR
  6c:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  70:	e3c1107f 	bic	r1, r1, #127	; 0x7f
        orr   r1,r1,#MODE_ABT|IRQ_BIT|FIQ_BIT  // Change to Abort Mode
  74:	e38110d7 	orr	r1, r1, #215	; 0xd7
        msr   CPSR,r1
  78:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  7c:	e1a0d000 	mov	sp, r0

        sub   r0,r0,#ABT_STACK_SIZE         // Calc stack base
  80:	e2400004 	sub	r0, r0, #4	; 0x4
		mrs   r1,CPSR
  84:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  88:	e3c1107f 	bic	r1, r1, #127	; 0x7f
        orr   r1,r1,#MODE_FIQ|IRQ_BIT|FIQ_BIT  // Change to FIQ Mode
  8c:	e38110d1 	orr	r1, r1, #209	; 0xd1
        msr   CPSR,r1
  90:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  94:	e1a0d000 	mov	sp, r0

        sub   r0,r0,#FIQ_STACK_SIZE         // Calc stack base
  98:	e2400004 	sub	r0, r0, #4	; 0x4
		mrs   r1,CPSR
  9c:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  a0:	e3c1107f 	bic	r1, r1, #127	; 0x7f
        orr   r1,r1,#MODE_IRQ|IRQ_BIT|FIQ_BIT  // Change to IRQ Mode
  a4:	e38110d2 	orr	r1, r1, #210	; 0xd2
        msr   CPSR,r1
  a8:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  ac:	e1a0d000 	mov	sp, r0

        sub   r0,r0,#IRQ_STACK_SIZE         // Calc stack base
  b0:	e2400080 	sub	r0, r0, #128	; 0x80
		mrs   r1,CPSR
  b4:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  b8:	e3c1107f 	bic	r1, r1, #127	; 0x7f
        orr   r1,r1,#MODE_SVC|IRQ_BIT|FIQ_BIT  // Change to Supervisor Mode
  bc:	e38110d3 	orr	r1, r1, #211	; 0xd3
        msr   CPSR,r1
  c0:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  c4:	e1a0d000 	mov	sp, r0

        sub   r0,r0,#SVC_STACK_SIZE         // Calc stack base
  c8:	e2400004 	sub	r0, r0, #4	; 0x4
		mrs   r1,CPSR
  cc:	e10f1000 	mrs	r1, CPSR
		bic   r1,r1,#0x7F
  d0:	e3c1107f 	bic	r1, r1, #127	; 0x7f
        orr   r1,r1,#MODE_SYS|IRQ_BIT|FIQ_BIT  // Change to System Mode
  d4:	e38110df 	orr	r1, r1, #223	; 0xdf
        msr   CPSR,r1
  d8:	e129f001 	msr	CPSR_fc, r1
        mov   sp,r0                         // Store stack base
  dc:	e1a0d000 	mov	sp, r0

// Copy initialized data to its execution address in RAM
// -> not necessary, bootloader can be directly ecxecuted from ROM
// -----------------------------------------------------
//#ifdef ROM_RUN
//        ldr   r1,=_etext                // -> ROM data start
//        ldr   r2,=_data                 // -> data start
//        ldr   r3,=_edata                // -> end of data
//1:      cmp   r2,r3                     // check if data to move
//        ldrlo r0,[r1],#4                // copy it
//        strlo r0,[r2],#4
//        blo   1b                        // loop until done
//#endif

// Clear .bss
// Hell no!
// ----------
//        mov   r0,#0                     // get a zero
//        ldr   r1,=__bss_start           // -> bss start
//        ldr   r2,=__bss_end__           // -> bss end
//2:      cmp   r1,r2                     // check if data to clear
//        strlo r0,[r1],#4                // clear 4 bytes
//        blo   2b                        // loop until done

// Call main program: main(0)
// --------------------------
        mov   r0,#0                     // no arguments (argc = 0)
  e0:	e3a00000 	mov	r0, #0	; 0x0
        mov   r1,r0
  e4:	e1a01000 	mov	r1, r0
        mov   r2,r0
  e8:	e1a02000 	mov	r2, r0
        mov   fp,r0                     // null frame pointer
  ec:	e1a0b000 	mov	fp, r0
        mov   r7,r0                     // null frame pointer for thumb
  f0:	e1a07000 	mov	r7, r0
        ldr   r10,=main
  f4:	e59fa188 	ldr	sl, [pc, #392]	; 284 <.text+0x284>
        mov   lr,pc
  f8:	e1a0e00f 	mov	lr, pc
        bx    r10                       // enter main()
  fc:	e12fff1a 	bx	sl

00000100 <_reset>:

        .size   _start, . - _start
        .endfunc

        .global _reset, reset, exit, abort
        .func   _reset
_reset:
reset:
exit:
abort:

        b     .                         // loop until reset
 100:	eafffffe 	b	100 <_reset>

00000104 <dab_handler>:

// Data Fetch Abort Interrupt Handler
// -------------------------------------------------------------------
dab_handler:
		mov   r13, lr
 104:	e1a0d00e 	mov	sp, lr
		mov   r4, #16
 108:	e3a04010 	mov	r4, #16	; 0x10
		mcr   p15, 0, r4, c13, c13, 0
 10c:	ee0d4f1d 	mcr	15, 0, r4, cr13, cr13, {0}
		mov   r4, #'<'
 110:	e3a0403c 	mov	r4, #60	; 0x3c
		bl    uart0_send_byte
 114:	eb000051 	bl	260 <uart0_send_byte>
		mov   r4, #'D'
 118:	e3a04044 	mov	r4, #68	; 0x44
		bl    uart0_send_byte
 11c:	eb00004f 	bl	260 <uart0_send_byte>
		mov   r4, #'A'
 120:	e3a04041 	mov	r4, #65	; 0x41
		bl    uart0_send_byte
 124:	eb00004d 	bl	260 <uart0_send_byte>
		mov   r4, #'B'
 128:	e3a04042 	mov	r4, #66	; 0x42
		bl    uart0_send_byte
 12c:	eb00004b 	bl	260 <uart0_send_byte>
		b     isr_handler
 130:	ea000022 	b	1c0 <isr_handler>

00000134 <iab_handler>:

// Instruction Fetch Abort Interrupt Handler
// -------------------------------------------------------------------
iab_handler:
		mov   r13, lr
 134:	e1a0d00e 	mov	sp, lr
		mov   r4, #32
 138:	e3a04020 	mov	r4, #32	; 0x20
		mcr   p15, 0, r4, c13, c13, 0
 13c:	ee0d4f1d 	mcr	15, 0, r4, cr13, cr13, {0}
		mov   r4, #'<'
 140:	e3a0403c 	mov	r4, #60	; 0x3c
		bl    uart0_send_byte
 144:	eb000045 	bl	260 <uart0_send_byte>
		mov   r4, #'I'
 148:	e3a04049 	mov	r4, #73	; 0x49
		bl    uart0_send_byte
 14c:	eb000043 	bl	260 <uart0_send_byte>
		mov   r4, #'A'
 150:	e3a04041 	mov	r4, #65	; 0x41
		bl    uart0_send_byte
 154:	eb000041 	bl	260 <uart0_send_byte>
		mov   r4, #'B'
 158:	e3a04042 	mov	r4, #66	; 0x42
		bl    uart0_send_byte
 15c:	eb00003f 	bl	260 <uart0_send_byte>
		b     isr_handler
 160:	ea000016 	b	1c0 <isr_handler>

00000164 <swi_handler>:

// Software Interrupt Handler
// -------------------------------------------------------------------
swi_handler:
		mov   r13, lr
 164:	e1a0d00e 	mov	sp, lr
		mov   r4, #64
 168:	e3a04040 	mov	r4, #64	; 0x40
		mcr   p15, 0, r4, c13, c13, 0
 16c:	ee0d4f1d 	mcr	15, 0, r4, cr13, cr13, {0}
		mov   r4, #'<'
 170:	e3a0403c 	mov	r4, #60	; 0x3c
		bl    uart0_send_byte
 174:	eb000039 	bl	260 <uart0_send_byte>
		mov   r4, #'S'
 178:	e3a04053 	mov	r4, #83	; 0x53
		bl    uart0_send_byte
 17c:	eb000037 	bl	260 <uart0_send_byte>
		mov   r4, #'W'
 180:	e3a04057 	mov	r4, #87	; 0x57
		bl    uart0_send_byte
 184:	eb000035 	bl	260 <uart0_send_byte>
		mov   r4, #'I'
 188:	e3a04049 	mov	r4, #73	; 0x49
		bl    uart0_send_byte
 18c:	eb000033 	bl	260 <uart0_send_byte>
		b     isr_handler
 190:	ea00000a 	b	1c0 <isr_handler>

00000194 <und_handler>:

// Undefined Instruction Interrupt Handler
// -------------------------------------------------------------------
und_handler:
		mov   r13, lr
 194:	e1a0d00e 	mov	sp, lr
		mov   r4, #128
 198:	e3a04080 	mov	r4, #128	; 0x80
		mcr   p15, 0, r4, c13, c13, 0
 19c:	ee0d4f1d 	mcr	15, 0, r4, cr13, cr13, {0}
		mov   r4, #'<'
 1a0:	e3a0403c 	mov	r4, #60	; 0x3c
		bl    uart0_send_byte
 1a4:	eb00002d 	bl	260 <uart0_send_byte>
		mov   r4, #'U'
 1a8:	e3a04055 	mov	r4, #85	; 0x55
		bl    uart0_send_byte
 1ac:	eb00002b 	bl	260 <uart0_send_byte>
		mov   r4, #'N'
 1b0:	e3a0404e 	mov	r4, #78	; 0x4e
		bl    uart0_send_byte
 1b4:	eb000029 	bl	260 <uart0_send_byte>
		mov   r4, #'D'
 1b8:	e3a04044 	mov	r4, #68	; 0x44
		bl    uart0_send_byte
 1bc:	eb000027 	bl	260 <uart0_send_byte>

000001c0 <isr_handler>:

// Interrupt Handler
// -------------------------------------------------------------------
isr_handler:
		mov   r4, #'-'
 1c0:	e3a0402d 	mov	r4, #45	; 0x2d
		bl    uart0_send_byte
 1c4:	eb000025 	bl	260 <uart0_send_byte>
		mov   r4, #'I'
 1c8:	e3a04049 	mov	r4, #73	; 0x49
		bl    uart0_send_byte
 1cc:	eb000023 	bl	260 <uart0_send_byte>
		mov   r4, #'N'
 1d0:	e3a0404e 	mov	r4, #78	; 0x4e
		bl    uart0_send_byte
 1d4:	eb000021 	bl	260 <uart0_send_byte>
		mov   r4, #'T'
 1d8:	e3a04054 	mov	r4, #84	; 0x54
		bl    uart0_send_byte
 1dc:	eb00001f 	bl	260 <uart0_send_byte>
		mov   r4, #' '
 1e0:	e3a04020 	mov	r4, #32	; 0x20
		bl    uart0_send_byte
 1e4:	eb00001d 	bl	260 <uart0_send_byte>
		mov   r4, #'@'
 1e8:	e3a04040 	mov	r4, #64	; 0x40
		bl    uart0_send_byte
 1ec:	eb00001b 	bl	260 <uart0_send_byte>

		sub   r7, r13, #4
 1f0:	e24d7004 	sub	r7, sp, #4	; 0x4
		bl    uart0_print_hex
 1f4:	eb00000a 	bl	224 <uart0_print_hex>

		mov   r4, #' '
 1f8:	e3a04020 	mov	r4, #32	; 0x20
		bl    uart0_send_byte
 1fc:	eb000017 	bl	260 <uart0_send_byte>
		mov   r4, #'['		
 200:	e3a0405b 	mov	r4, #91	; 0x5b
		bl    uart0_send_byte
 204:	eb000015 	bl	260 <uart0_send_byte>

		mrc   p15,0,r7, c9, c9
 208:	ee197f19 	mrc	15, 0, r7, cr9, cr9, {0}
		bl    uart0_print_hex
 20c:	eb000004 	bl	224 <uart0_print_hex>

		mov   r4, #']'
 210:	e3a0405d 	mov	r4, #93	; 0x5d
		bl    uart0_send_byte
 214:	eb000011 	bl	260 <uart0_send_byte>
		mov   r4, #'>'
 218:	e3a0403e 	mov	r4, #62	; 0x3e
		bl    uart0_send_byte
 21c:	eb00000f 	bl	260 <uart0_send_byte>
		b .
 220:	eafffffe 	b	220 <isr_handler+0x60>

00000224 <uart0_print_hex>:


// Send 32-bit HEX value via UART0
// -------------------------------------------------------------------
uart0_print_hex:
		mov   r9, lr // save link register
 224:	e1a0900e 	mov	r9, lr
		mov   r8, #32
 228:	e3a08020 	mov	r8, #32	; 0x20

0000022c <uart0_print_hex_loop>:

uart0_print_hex_loop:
		cmp   r8, #0
 22c:	e3580000 	cmp	r8, #0	; 0x0
		moveq pc, r9
 230:	01a0f009 	moveq	pc, r9

		sub   r8, r8, #4
 234:	e2488004 	sub	r8, r8, #4	; 0x4
		mov   r6, r7, lsr r8 // isolate 4-bit value
 238:	e1a06837 	mov	r6, r7, lsr r8
		and   r6, r6, #0x0F
 23c:	e206600f 	and	r6, r6, #15	; 0xf

		cmp   r6, #9
 240:	e3560009 	cmp	r6, #9	; 0x9
		bgt   adapt_char
 244:	ca000001 	bgt	250 <adapt_char>
		add   r4, r6, #'0'
 248:	e2864030 	add	r4, r6, #48	; 0x30

		b     uart0_print_hex_char
 24c:	ea000001 	b	258 <uart0_print_hex_char>

00000250 <adapt_char>:
adapt_char:
		sub   r6, r6, #10
 250:	e246600a 	sub	r6, r6, #10	; 0xa
		add   r4, r6, #'A'
 254:	e2864041 	add	r4, r6, #65	; 0x41

00000258 <uart0_print_hex_char>:

uart0_print_hex_char:
		bl    uart0_send_byte
 258:	eb000000 	bl	260 <uart0_send_byte>
		b     uart0_print_hex_loop
 25c:	eafffff2 	b	22c <uart0_print_hex_loop>

00000260 <uart0_send_byte>:


// Send one char via UART0
// -------------------------------------------------------------------
uart0_send_byte:
		ldr   r0, =(0xFFFF001C)
 260:	e59f0020 	ldr	r0, [pc, #32]	; 288 <.text+0x288>
		ldr   r0, [r0]
 264:	e5900000 	ldr	r0, [r0]
		and   r0, r0, #0x01
 268:	e2000001 	and	r0, r0, #1	; 0x1
		cmp   r0, #0
 26c:	e3500000 	cmp	r0, #0	; 0x0
		beq   uart0_send_byte
 270:	0afffffa 	beq	260 <uart0_send_byte>
		ldr   r0, =(0xFFFF0018)
 274:	e59f0010 	ldr	r0, [pc, #16]	; 28c <.text+0x28c>
		str   r4, [r0]
 278:	e5804000 	str	r4, [r0]
		mov   pc, lr
 27c:	e1a0f00e 	mov	pc, lr
 280:	00004c00 	andeq	r4, r0, r0, lsl #24
 284:	00000678 	andeq	r0, r0, r8, ror r6
 288:	ffff001c 	undefined instruction 0xffff001c
 28c:	ffff0018 	undefined instruction 0xffff0018

00000290 <io_uart0_read_byte>:
   static inline unsigned long get_cmsr(void)
// ******************************************************************************
{
	unsigned long _cmsr;
	asm volatile (" mrs %0, cpsr" : "=r" (_cmsr) : /* no inputs */  );
 290:	e10f2000 	mrs	r2, CPSR
	return _cmsr;
}

// ******************************************************************************
// write CMSR value
   static inline void set_cmsr(unsigned long _cmsr)
// ******************************************************************************
{
	asm volatile (" msr cpsr, %0" : /* no outputs */ : "r" (_cmsr)  );
 294:	e38230c0 	orr	r3, r2, #192	; 0xc0
 298:	e129f003 	msr	CPSR_fc, r3
 29c:	e3e01a0f 	mvn	r1, #61440	; 0xf000
 2a0:	e5113fe3 	ldr	r3, [r1, #-4067]
 2a4:	e3130002 	tst	r3, #2	; 0x2
 2a8:	e3e00000 	mvn	r0, #0	; 0x0
 2ac:	15110fe7 	ldrne	r0, [r1, #-4071]
 2b0:	e129f002 	msr	CPSR_fc, r2
 2b4:	e12fff1e 	bx	lr

000002b8 <io_uart0_send_byte>:
 2b8:	e10f1000 	mrs	r1, CPSR
 2bc:	e38130c0 	orr	r3, r1, #192	; 0xc0
 2c0:	e129f003 	msr	CPSR_fc, r3
 2c4:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 2c8:	e5123fe3 	ldr	r3, [r2, #-4067]
 2cc:	e3130001 	tst	r3, #1	; 0x1
 2d0:	0afffffc 	beq	2c8 <io_uart0_send_byte+0x10>
 2d4:	e20030ff 	and	r3, r0, #255	; 0xff
 2d8:	e5023fe7 	str	r3, [r2, #-4071]
 2dc:	e129f001 	msr	CPSR_fc, r1
 2e0:	e12fff1e 	bx	lr

000002e4 <io_spi0_config>:
 2e4:	e20000ff 	and	r0, r0, #255	; 0xff
 2e8:	e10f2000 	mrs	r2, CPSR
 2ec:	e38230c0 	orr	r3, r2, #192	; 0xc0
 2f0:	e129f003 	msr	CPSR_fc, r3
 2f4:	e3500001 	cmp	r0, #1	; 0x1
 2f8:	03e03a0f 	mvneq	r3, #61440	; 0xf000
 2fc:	e3810b09 	orr	r0, r1, #9216	; 0x2400
 300:	13e03a0f 	mvnne	r3, #61440	; 0xf000
 304:	e3811b01 	orr	r1, r1, #1024	; 0x400
 308:	05030fcf 	streq	r0, [r3, #-4047]
 30c:	15031fcf 	strne	r1, [r3, #-4047]
 310:	e129f002 	msr	CPSR_fc, r2
 314:	e12fff1e 	bx	lr

00000318 <io_spi0_trans>:
 318:	e10f1000 	mrs	r1, CPSR
 31c:	e38130c0 	orr	r3, r1, #192	; 0xc0
 320:	e129f003 	msr	CPSR_fc, r3
 324:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 328:	e5123fcf 	ldr	r3, [r2, #-4047]
 32c:	e3130c01 	tst	r3, #256	; 0x100
 330:	1afffffc 	bne	328 <io_spi0_trans+0x10>
 334:	e5020fbf 	str	r0, [r2, #-4031]
 338:	e5123fcf 	ldr	r3, [r2, #-4047]
 33c:	e3833c01 	orr	r3, r3, #256	; 0x100
 340:	e5023fcf 	str	r3, [r2, #-4047]
 344:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 348:	e5123fcf 	ldr	r3, [r2, #-4047]
 34c:	e3130c01 	tst	r3, #256	; 0x100
 350:	1afffffc 	bne	348 <io_spi0_trans+0x30>
 354:	e5120fbf 	ldr	r0, [r2, #-4031]
 358:	e129f001 	msr	CPSR_fc, r1
 35c:	e12fff1e 	bx	lr

00000360 <io_spi0_enable>:
 360:	e20000ff 	and	r0, r0, #255	; 0xff
 364:	e10f1000 	mrs	r1, CPSR
 368:	e38130c0 	orr	r3, r1, #192	; 0xc0
 36c:	e129f003 	msr	CPSR_fc, r3
 370:	e3e0ca0f 	mvn	ip, #61440	; 0xf000
 374:	e51c3fc7 	ldr	r3, [ip, #-4039]
 378:	e3a02001 	mov	r2, #1	; 0x1
 37c:	e1833012 	orr	r3, r3, r2, lsl r0
 380:	e50c3fc7 	str	r3, [ip, #-4039]
 384:	e129f001 	msr	CPSR_fc, r1
 388:	e12fff1e 	bx	lr

0000038c <get_syscpreg>:
 38c:	e20000ff 	and	r0, r0, #255	; 0xff
 390:	e350000f 	cmp	r0, #15	; 0xf
 394:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
 398:	ea00000f 	b	3dc <.text+0x3dc>
 39c:	0000045c 	andeq	r0, r0, ip, asr r4
 3a0:	00000454 	andeq	r0, r0, r4, asr r4
 3a4:	0000044c 	andeq	r0, r0, ip, asr #8
 3a8:	00000444 	andeq	r0, r0, r4, asr #8
 3ac:	0000043c 	andeq	r0, r0, ip, lsr r4
 3b0:	00000434 	andeq	r0, r0, r4, lsr r4
 3b4:	0000042c 	andeq	r0, r0, ip, lsr #8
 3b8:	00000424 	andeq	r0, r0, r4, lsr #8
 3bc:	0000041c 	andeq	r0, r0, ip, lsl r4
 3c0:	00000414 	andeq	r0, r0, r4, lsl r4
 3c4:	0000040c 	andeq	r0, r0, ip, lsl #8
 3c8:	00000404 	andeq	r0, r0, r4, lsl #8
 3cc:	000003fc 	streqd	r0, [r0], -ip
 3d0:	000003f4 	streqd	r0, [r0], -r4
 3d4:	000003ec 	andeq	r0, r0, ip, ror #7
 3d8:	000003e4 	andeq	r0, r0, r4, ror #7
 3dc:	e3a00000 	mov	r0, #0	; 0x0
 3e0:	e12fff1e 	bx	lr
 3e4:	ee1f0f1f 	mrc	15, 0, r0, cr15, cr15, {0}
 3e8:	e12fff1e 	bx	lr
 3ec:	ee1e0f1e 	mrc	15, 0, r0, cr14, cr14, {0}
 3f0:	e12fff1e 	bx	lr
 3f4:	ee1d0f1d 	mrc	15, 0, r0, cr13, cr13, {0}
 3f8:	e12fff1e 	bx	lr
 3fc:	ee1c0f1c 	mrc	15, 0, r0, cr12, cr12, {0}
 400:	e12fff1e 	bx	lr
 404:	ee1b0f1b 	mrc	15, 0, r0, cr11, cr11, {0}
 408:	e12fff1e 	bx	lr
 40c:	ee1a0f1a 	mrc	15, 0, r0, cr10, cr10, {0}
 410:	e12fff1e 	bx	lr
 414:	ee190f19 	mrc	15, 0, r0, cr9, cr9, {0}
 418:	e12fff1e 	bx	lr
 41c:	ee180f18 	mrc	15, 0, r0, cr8, cr8, {0}
 420:	e12fff1e 	bx	lr
 424:	ee170f17 	mrc	15, 0, r0, cr7, cr7, {0}
 428:	e12fff1e 	bx	lr
 42c:	ee160f16 	mrc	15, 0, r0, cr6, cr6, {0}
 430:	e12fff1e 	bx	lr
 434:	ee150f15 	mrc	15, 0, r0, cr5, cr5, {0}
 438:	e12fff1e 	bx	lr
 43c:	ee140f14 	mrc	15, 0, r0, cr4, cr4, {0}
 440:	e12fff1e 	bx	lr
 444:	ee130f13 	mrc	15, 0, r0, cr3, cr3, {0}
 448:	e12fff1e 	bx	lr
 44c:	ee120f12 	mrc	15, 0, r0, cr2, cr2, {0}
 450:	e12fff1e 	bx	lr
 454:	ee110f11 	mrc	15, 0, r0, cr1, cr1, {0}
 458:	e12fff1e 	bx	lr
 45c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
 460:	e12fff1e 	bx	lr

00000464 <set_syscpreg>:
 464:	e20110ff 	and	r1, r1, #255	; 0xff
 468:	e2411006 	sub	r1, r1, #6	; 0x6
 46c:	e3510007 	cmp	r1, #7	; 0x7
 470:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
 474:	ea000008 	b	49c <.text+0x49c>
 478:	000004a0 	andeq	r0, r0, r0, lsr #9
 47c:	0000049c 	muleq	r0, ip, r4
 480:	0000049c 	muleq	r0, ip, r4
 484:	0000049c 	muleq	r0, ip, r4
 488:	0000049c 	muleq	r0, ip, r4
 48c:	000004a8 	andeq	r0, r0, r8, lsr #9
 490:	000004b0 	streqh	r0, [r0], -r0
 494:	00000498 	muleq	r0, r8, r4
 498:	ee0d0f1d 	mcr	15, 0, r0, cr13, cr13, {0}
 49c:	e12fff1e 	bx	lr
 4a0:	ee060f16 	mcr	15, 0, r0, cr6, cr6, {0}
 4a4:	e12fff1e 	bx	lr
 4a8:	ee0b0f1b 	mcr	15, 0, r0, cr11, cr11, {0}
 4ac:	e12fff1e 	bx	lr
 4b0:	ee0c0f1c 	mcr	15, 0, r0, cr12, cr12, {0}
 4b4:	e12fff1e 	bx	lr

000004b8 <io_enable_irq>:
 4b8:	e10f3000 	mrs	r3, CPSR
 4bc:	e3c33080 	bic	r3, r3, #128	; 0x80
 4c0:	e129f003 	msr	CPSR_fc, r3
}

// ******************************************************************************
// Enable global IRQ
   void io_enable_irq(void)
// ******************************************************************************
{
	unsigned long _cmsr = get_cmsr();
	_cmsr = _cmsr & ~(1<<CMSR_IRQ);
	set_cmsr(_cmsr);
}
 4c4:	e12fff1e 	bx	lr

000004c8 <long_to_hex_string>:
   void long_to_hex_string(unsigned long data,    // max 32 bit data word
                           unsigned char *buffer, // buffer to store the string
						   unsigned char numbers) // number of places, max 8
// ############################################################################################
{
 4c8:	e92d4010 	stmdb	sp!, {r4, lr}
 4cc:	e20240ff 	and	r4, r2, #255	; 0xff
	unsigned char temp_char = 0;
	unsigned long temp_data = 0;

	// fit into range
	if(numbers > 8)
 4d0:	e3540008 	cmp	r4, #8	; 0x8
 4d4:	83a04008 	movhi	r4, #8	; 0x8
 4d8:	8a000001 	bhi	4e4 <long_to_hex_string+0x1c>
		numbers = 8;
	if(numbers < 1)
 4dc:	e3540000 	cmp	r4, #0	; 0x0
		numbers = 1;

	while(numbers > 0){
		// isolate one 4-bit value
		if(numbers > 1)
			temp_data = data >> ((numbers-1)*4);
		else
			temp_data = data;
		temp_data = temp_data & 0x0000000F;
		numbers--;

		// convert 4-bit value temp_data to char temp_char
		if(temp_data < 10)
			temp_char = '0' + temp_data;
		else
			temp_char = 'A' + temp_data - 10;

		// save character
		*buffer++ = temp_char;
	}

	*buffer++ = 0; // terminate string
}
 4e0:	03a04001 	moveq	r4, #1	; 0x1
 4e4:	e1a02001 	mov	r2, r1
 4e8:	e1a0e004 	mov	lr, r4
 4ec:	e1a0310e 	mov	r3, lr, lsl #2
 4f0:	e35e0001 	cmp	lr, #1	; 0x1
 4f4:	e2433004 	sub	r3, r3, #4	; 0x4
 4f8:	e1a0c000 	mov	ip, r0
 4fc:	81a0c330 	movhi	ip, r0, lsr r3
 500:	e24e3001 	sub	r3, lr, #1	; 0x1
 504:	e20cc00f 	and	ip, ip, #15	; 0xf
 508:	e203e0ff 	and	lr, r3, #255	; 0xff
 50c:	e35c0009 	cmp	ip, #9	; 0x9
 510:	e28c3030 	add	r3, ip, #48	; 0x30
 514:	828c3037 	addhi	r3, ip, #55	; 0x37
 518:	e35e0000 	cmp	lr, #0	; 0x0
 51c:	e4c23001 	strb	r3, [r2], #1
 520:	1afffff1 	bne	4ec <long_to_hex_string+0x24>
 524:	e2443001 	sub	r3, r4, #1	; 0x1
 528:	e20330ff 	and	r3, r3, #255	; 0xff
 52c:	e0813003 	add	r3, r1, r3
 530:	e5c3e001 	strb	lr, [r3, #1]
 534:	e8bd8010 	ldmia	sp!, {r4, pc}

00000538 <get_adc>:

// ############################################################################################
// read external ADC value
   unsigned int get_adc(int adc_index) // adc 0..7
// ############################################################################################
{
 538:	e92d4010 	stmdb	sp!, {r4, lr}
 53c:	e1a04000 	mov	r4, r0
	unsigned long temp;

	if ((adc_index < 0) || (adc_index > 7))
 540:	e3540007 	cmp	r4, #7	; 0x7
		return 0;

	// config spi
	io_spi0_config(1,16); // auto assert cs, 16 bit transfer
 544:	e3a01010 	mov	r1, #16	; 0x10
 548:	e3a00001 	mov	r0, #1	; 0x1
 54c:	9a000001 	bls	558 <get_adc+0x20>
	io_spi0_enable(adc_cs);

	temp = adc_index * 2048;
	io_spi0_trans(0); // dummy read
	return (unsigned int)io_spi0_trans(temp);
}
 550:	e3a00000 	mov	r0, #0	; 0x0
 554:	e8bd8010 	ldmia	sp!, {r4, pc}
 558:	ebffff61 	bl	2e4 <io_spi0_config>
 55c:	e3a00006 	mov	r0, #6	; 0x6
 560:	ebffff7e 	bl	360 <io_spi0_enable>
 564:	e3a00000 	mov	r0, #0	; 0x0
 568:	ebffff6a 	bl	318 <io_spi0_trans>
 56c:	e1a00584 	mov	r0, r4, lsl #11
 570:	e8bd4010 	ldmia	sp!, {r4, lr}
 574:	eaffff67 	b	318 <io_spi0_trans>

00000578 <delay>:

// ############################################################################################
// simple delay routine
   void delay(int time) // waits time*10000 clock ticks
// ############################################################################################
{
	time = time*2500*4;
 578:	e0603280 	rsb	r3, r0, r0, lsl #5
 57c:	e0800103 	add	r0, r0, r3, lsl #2
 580:	e0800100 	add	r0, r0, r0, lsl #2
 584:	e1a00200 	mov	r0, r0, lsl #4
	while(time > 0){
 588:	e3500000 	cmp	r0, #0	; 0x0
 58c:	d12fff1e 	bxle	lr
		asm volatile ("NOP");
 590:	e1a00000 	nop			(mov r0,r0)
 594:	e2500001 	subs	r0, r0, #1	; 0x1
 598:	1afffffc 	bne	590 <delay+0x18>
 59c:	e12fff1e 	bx	lr

000005a0 <uart0_printf>:
// ############################################################################################
// Print text string via UART 0
   const char *uart0_printf(const char *string)
// ############################################################################################
{
 5a0:	e92d4010 	stmdb	sp!, {r4, lr}
 5a4:	e1a04000 	mov	r4, r0
	char ch;

	while ((ch = *string)){
 5a8:	e5d00000 	ldrb	r0, [r0]
 5ac:	e3500000 	cmp	r0, #0	; 0x0
 5b0:	1a000003 	bne	5c4 <uart0_printf+0x24>
 5b4:	ea000005 	b	5d0 <uart0_printf+0x30>
 5b8:	e5f40001 	ldrb	r0, [r4, #1]!
 5bc:	e3500000 	cmp	r0, #0	; 0x0
 5c0:	0a000002 	beq	5d0 <uart0_printf+0x30>
		if (io_uart0_send_byte(ch)<=0)
 5c4:	ebffff3b 	bl	2b8 <io_uart0_send_byte>
 5c8:	e3500000 	cmp	r0, #0	; 0x0
 5cc:	cafffff9 	bgt	5b8 <uart0_printf+0x18>
			break;
		string++;
	}
	return string;
}
 5d0:	e1a00004 	mov	r0, r4
 5d4:	e8bd8010 	ldmia	sp!, {r4, pc}

000005d8 <uart0_scanf>:

// ############################################################################################
// Read text string via UART 0
   void uart0_scanf(unsigned char *buffer, int length, unsigned char en_echo)
// ############################################################################################
{
 5d8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
	int temp = 0;

	while(length > 0){
 5dc:	e2514000 	subs	r4, r1, #0	; 0x0
 5e0:	e1a05000 	mov	r5, r0
 5e4:	e20260ff 	and	r6, r2, #255	; 0xff
 5e8:	d8bd8070 	ldmleia	sp!, {r4, r5, r6, pc}
		temp = io_uart0_read_byte();
 5ec:	ebffff27 	bl	290 <io_uart0_read_byte>
		if(temp != -1){
 5f0:	e3700001 	cmn	r0, #1	; 0x1
			temp = (unsigned char)(temp & 0x000000FF);
 5f4:	e20030ff 	and	r3, r0, #255	; 0xff
 5f8:	0a000005 	beq	614 <uart0_scanf+0x3c>
			*buffer++ = temp;
			if(en_echo == 1)
 5fc:	e3560001 	cmp	r6, #1	; 0x1
 600:	e5c53000 	strb	r3, [r5]
				io_uart0_send_byte(temp); // echo
 604:	e1a00003 	mov	r0, r3
 608:	e2855001 	add	r5, r5, #1	; 0x1
 60c:	0a000003 	beq	620 <uart0_scanf+0x48>
			length--;
 610:	e2444001 	sub	r4, r4, #1	; 0x1
 614:	e3540000 	cmp	r4, #0	; 0x0
 618:	cafffff3 	bgt	5ec <uart0_scanf+0x14>
 61c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 620:	ebffff24 	bl	2b8 <io_uart0_send_byte>
 624:	eafffff9 	b	610 <uart0_scanf+0x38>

00000628 <uart0_print_buffer>:
		}
	}
}

// ############################################################################################
// Print character buffer via UART 0
   void uart0_print_buffer(unsigned char *buffer, int size)
// ############################################################################################
{
 628:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	unsigned char char_buffer = 0;
	while(size > 0){
 62c:	e2514000 	subs	r4, r1, #0	; 0x0
 630:	e1a05000 	mov	r5, r0
 634:	d8bd8030 	ldmleia	sp!, {r4, r5, pc}
		char_buffer = *buffer++;
		io_uart0_send_byte(char_buffer);
 638:	e4d50001 	ldrb	r0, [r5], #1
 63c:	ebffff1d 	bl	2b8 <io_uart0_send_byte>
 640:	e2544001 	subs	r4, r4, #1	; 0x1
 644:	1afffffb 	bne	638 <uart0_print_buffer+0x10>
 648:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000064c <timer0_isr>:


/* ---- IRQ: Timer ISR ---- */
void __attribute__ ((interrupt("IRQ"))) timer0_isr(void)
{
 64c:	e24ee004 	sub	lr, lr, #4	; 0x4
 650:	e92d500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
	// toggle status led
	set_syscpreg((get_syscpreg(SYS_IO) ^ 0x01), SYS_IO);
 654:	e3a0000d 	mov	r0, #13	; 0xd
 658:	ebffff4b 	bl	38c <get_syscpreg>
 65c:	e3a0100d 	mov	r1, #13	; 0xd
 660:	e2200001 	eor	r0, r0, #1	; 0x1
 664:	ebffff7e 	bl	464 <set_syscpreg>

	// acknowledge interrupt
	VICVectAddr = 0;
 668:	e3a02000 	mov	r2, #0	; 0x0
 66c:	e3e03000 	mvn	r3, #0	; 0x0
 670:	e5032fcf 	str	r2, [r3, #-4047]
}
 674:	e8fd900f 	ldmia	sp!, {r0, r1, r2, r3, ip, pc}^

00000678 <main>:


/* ---- Main function ---- */
int main(void)
{
	int temp;

	// timer init
	STME0_CNT  = 0;
	STME0_VAL  = 50000000; // threshold value for 1s ticks
 678:	e3a027be 	mov	r2, #49807360	; 0x2f80000
 67c:	e2822a2f 	add	r2, r2, #192512	; 0x2f000
 680:	e3e01a0f 	mvn	r1, #61440	; 0xf000
 684:	e2822080 	add	r2, r2, #128	; 0x80
 688:	e3a03000 	mov	r3, #0	; 0x0
 68c:	e5013fdf 	str	r3, [r1, #-4063]
 690:	e5012fdb 	str	r2, [r1, #-4059]
	STME0_CONF = (1<<2) | (1<<1) | (1<<0); // interrupt en, auto reset, timer enable
	VICVectAddr0 = (unsigned long)timer0_isr;
 694:	e59f205c 	ldr	r2, [pc, #92]	; 6f8 <.text+0x6f8>
 698:	e3e00000 	mvn	r0, #0	; 0x0
 69c:	e2833007 	add	r3, r3, #7	; 0x7
 6a0:	e5013fd7 	str	r3, [r1, #-4055]
 6a4:	e5002fbf 	str	r2, [r0, #-4031]
	VICVectCntl0 = (1<<5) | 0; // enable and channel select = 0 (timer0)
 6a8:	e2833019 	add	r3, r3, #25	; 0x19
	VICIntEnable = (1<<0); // enable channel 0 (timer0)
 6ac:	e3a02001 	mov	r2, #1	; 0x1
 6b0:	e5003f7f 	str	r3, [r0, #-3967]
 6b4:	e52de004 	str	lr, [sp, #-4]!
 6b8:	e5002fef 	str	r2, [r0, #-4079]
	io_enable_irq(); // enable IRQ
 6bc:	ebffff7d 	bl	4b8 <io_enable_irq>

	// Intro
	uart0_printf("\r\n\r\nSTORM SoC Basic Configuration\r\n");
 6c0:	e59f0034 	ldr	r0, [pc, #52]	; 6fc <.text+0x6fc>
 6c4:	ebffffb5 	bl	5a0 <uart0_printf>
	uart0_printf("Demo program\r\n\r\n");
 6c8:	e59f0030 	ldr	r0, [pc, #48]	; 700 <.text+0x700>
 6cc:	ebffffb3 	bl	5a0 <uart0_printf>

	uart0_printf("Press any key!\r\n");
 6d0:	e59f002c 	ldr	r0, [pc, #44]	; 704 <.text+0x704>
 6d4:	ebffffb1 	bl	5a0 <uart0_printf>

	// echo received char
	while(1){
		temp = io_uart0_read_byte();
 6d8:	ebfffeec 	bl	290 <io_uart0_read_byte>
		if (temp != -1)
 6dc:	e3700001 	cmn	r0, #1	; 0x1
 6e0:	0afffffc 	beq	6d8 <main+0x60>
			io_uart0_send_byte(temp);
 6e4:	ebfffef3 	bl	2b8 <io_uart0_send_byte>
 6e8:	ebfffee8 	bl	290 <io_uart0_read_byte>
 6ec:	e3700001 	cmn	r0, #1	; 0x1
 6f0:	1afffffb 	bne	6e4 <main+0x6c>
 6f4:	eafffff7 	b	6d8 <main+0x60>
 6f8:	0000064c 	andeq	r0, r0, ip, asr #12
 6fc:	00000ae4 	andeq	r0, r0, r4, ror #21
 700:	00000b08 	andeq	r0, r0, r8, lsl #22
 704:	00000b1c 	andeq	r0, r0, ip, lsl fp

00000708 <io_clr_gpio0_pin>:
 708:	e20000ff 	and	r0, r0, #255	; 0xff
 70c:	e10f1000 	mrs	r1, CPSR
 710:	e38130c0 	orr	r3, r1, #192	; 0xc0
 714:	e129f003 	msr	CPSR_fc, r3
 718:	e3a02001 	mov	r2, #1	; 0x1
 71c:	e1a02012 	mov	r2, r2, lsl r0
 720:	e3e00a0f 	mvn	r0, #61440	; 0xf000
 724:	e5103fff 	ldr	r3, [r0, #-4095]
 728:	e1e02002 	mvn	r2, r2
 72c:	e0033002 	and	r3, r3, r2
 730:	e5003fff 	str	r3, [r0, #-4095]
 734:	e129f001 	msr	CPSR_fc, r1
 738:	e12fff1e 	bx	lr

0000073c <io_read_gpio0_pin>:
 73c:	e200c0ff 	and	ip, r0, #255	; 0xff
 740:	e10f1000 	mrs	r1, CPSR
 744:	e38130c0 	orr	r3, r1, #192	; 0xc0
 748:	e129f003 	msr	CPSR_fc, r3
 74c:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 750:	e5123ffb 	ldr	r3, [r2, #-4091]
 754:	e129f001 	msr	CPSR_fc, r1
 758:	e3a00001 	mov	r0, #1	; 0x1
 75c:	e0030c10 	and	r0, r3, r0, lsl ip
 760:	e12fff1e 	bx	lr

00000764 <io_disable_irq>:
 764:	e10f3000 	mrs	r3, CPSR
 768:	e3833080 	orr	r3, r3, #128	; 0x80
 76c:	e129f003 	msr	CPSR_fc, r3

// ******************************************************************************
// Disable global IRQ
   void io_disable_irq(void)
// ******************************************************************************
{
	unsigned long _cmsr = get_cmsr();
	_cmsr = _cmsr | (1<<CMSR_IRQ);
	set_cmsr(_cmsr);
}
 770:	e12fff1e 	bx	lr

00000774 <io_i2c0_byte_transfer>:
 774:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
 778:	e203c0ff 	and	ip, r3, #255	; 0xff
 77c:	e20050ff 	and	r5, r0, #255	; 0xff
 780:	e1a04002 	mov	r4, r2
 784:	e20100ff 	and	r0, r1, #255	; 0xff
 788:	e5dd6013 	ldrb	r6, [sp, #19]
 78c:	e10fe000 	mrs	lr, CPSR
 790:	e38e30c0 	orr	r3, lr, #192	; 0xc0
 794:	e129f003 	msr	CPSR_fc, r3
 798:	e3e01a0f 	mvn	r1, #61440	; 0xf000
 79c:	e20030fe 	and	r3, r0, #254	; 0xfe
 7a0:	e3a02090 	mov	r2, #144	; 0x90
 7a4:	e5013f93 	str	r3, [r1, #-3987]
 7a8:	e5012faf 	str	r2, [r1, #-4015]
 7ac:	e5113faf 	ldr	r3, [r1, #-4015]
 7b0:	e3130002 	tst	r3, #2	; 0x2
 7b4:	1afffffc 	bne	7ac <io_i2c0_byte_transfer+0x38>
 7b8:	e5113faf 	ldr	r3, [r1, #-4015]
 7bc:	e3130080 	tst	r3, #128	; 0x80
 7c0:	1a00003d 	bne	8bc <io_i2c0_byte_transfer+0x148>
 7c4:	e35c0000 	cmp	ip, #0	; 0x0
 7c8:	0a000013 	beq	81c <io_i2c0_byte_transfer+0xa8>
 7cc:	e24c3001 	sub	r3, ip, #1	; 0x1
 7d0:	e203c0ff 	and	ip, r3, #255	; 0xff
 7d4:	e35c0001 	cmp	ip, #1	; 0x1
 7d8:	01a02424 	moveq	r2, r4, lsr #8
 7dc:	03e03a0f 	mvneq	r3, #61440	; 0xf000
 7e0:	13e03a0f 	mvnne	r3, #61440	; 0xf000
 7e4:	05032f93 	streq	r2, [r3, #-3987]
 7e8:	15034f93 	strne	r4, [r3, #-3987]
 7ec:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 7f0:	e3a03010 	mov	r3, #16	; 0x10
 7f4:	e5023faf 	str	r3, [r2, #-4015]
 7f8:	e5123faf 	ldr	r3, [r2, #-4015]
 7fc:	e3130002 	tst	r3, #2	; 0x2
 800:	1afffffc 	bne	7f8 <io_i2c0_byte_transfer+0x84>
 804:	e5123faf 	ldr	r3, [r2, #-4015]
 808:	e3130080 	tst	r3, #128	; 0x80
 80c:	0affffec 	beq	7c4 <io_i2c0_byte_transfer+0x50>
 810:	e129f00e 	msr	CPSR_fc, lr
 814:	e3e00001 	mvn	r0, #1	; 0x1
 818:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 81c:	e3550077 	cmp	r5, #119	; 0x77
 820:	0a000014 	beq	878 <io_i2c0_byte_transfer+0x104>
 824:	e3550072 	cmp	r5, #114	; 0x72
 828:	1a000026 	bne	8c8 <io_i2c0_byte_transfer+0x154>
 82c:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 830:	e3803001 	orr	r3, r0, #1	; 0x1
 834:	e3a01090 	mov	r1, #144	; 0x90
 838:	e5023f93 	str	r3, [r2, #-3987]
 83c:	e5021faf 	str	r1, [r2, #-4015]
 840:	e5123faf 	ldr	r3, [r2, #-4015]
 844:	e3130002 	tst	r3, #2	; 0x2
 848:	1afffffc 	bne	840 <io_i2c0_byte_transfer+0xcc>
 84c:	e5123faf 	ldr	r3, [r2, #-4015]
 850:	e3130080 	tst	r3, #128	; 0x80
 854:	03a03068 	moveq	r3, #104	; 0x68
 858:	05023faf 	streq	r3, [r2, #-4015]
 85c:	03e00a0f 	mvneq	r0, #61440	; 0xf000
 860:	1a000012 	bne	8b0 <io_i2c0_byte_transfer+0x13c>
 864:	e5103faf 	ldr	r3, [r0, #-4015]
 868:	e3130002 	tst	r3, #2	; 0x2
 86c:	1afffffc 	bne	864 <io_i2c0_byte_transfer+0xf0>
 870:	e5100f93 	ldr	r0, [r0, #-3987]
 874:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 878:	e3e03a0f 	mvn	r3, #61440	; 0xf000
 87c:	e3a02050 	mov	r2, #80	; 0x50
 880:	e5036f93 	str	r6, [r3, #-3987]
 884:	e5032faf 	str	r2, [r3, #-4015]
 888:	e1a02003 	mov	r2, r3
 88c:	e5123faf 	ldr	r3, [r2, #-4015]
 890:	e3130002 	tst	r3, #2	; 0x2
 894:	1afffffc 	bne	88c <io_i2c0_byte_transfer+0x118>
 898:	e5123faf 	ldr	r3, [r2, #-4015]
 89c:	e3130080 	tst	r3, #128	; 0x80
 8a0:	1a000002 	bne	8b0 <io_i2c0_byte_transfer+0x13c>
 8a4:	e129f00e 	msr	CPSR_fc, lr
 8a8:	e3a00000 	mov	r0, #0	; 0x0
 8ac:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 8b0:	e129f00e 	msr	CPSR_fc, lr
 8b4:	e3e00002 	mvn	r0, #2	; 0x2
 8b8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 8bc:	e129f00e 	msr	CPSR_fc, lr
 8c0:	e3e00000 	mvn	r0, #0	; 0x0
 8c4:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
 8c8:	e129f00e 	msr	CPSR_fc, lr
 8cc:	e3e00003 	mvn	r0, #3	; 0x3
 8d0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

000008d4 <io_set_gpio0_pin>:
 8d4:	e20000ff 	and	r0, r0, #255	; 0xff
 8d8:	e10f1000 	mrs	r1, CPSR
 8dc:	e38130c0 	orr	r3, r1, #192	; 0xc0
 8e0:	e129f003 	msr	CPSR_fc, r3
 8e4:	e3e0ca0f 	mvn	ip, #61440	; 0xf000
 8e8:	e51c3fff 	ldr	r3, [ip, #-4095]
 8ec:	e3a02001 	mov	r2, #1	; 0x1
 8f0:	e1833012 	orr	r3, r3, r2, lsl r0
 8f4:	e50c3fff 	str	r3, [ip, #-4095]
 8f8:	e129f001 	msr	CPSR_fc, r1
 8fc:	e12fff1e 	bx	lr

00000900 <io_read_gpio0_port>:
 900:	e10f1000 	mrs	r1, CPSR
 904:	e38130c0 	orr	r3, r1, #192	; 0xc0
 908:	e129f003 	msr	CPSR_fc, r3
 90c:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 910:	e5120ffb 	ldr	r0, [r2, #-4091]
 914:	e129f001 	msr	CPSR_fc, r1
 918:	e12fff1e 	bx	lr

0000091c <io_i2c0_speed>:
 91c:	e10f1000 	mrs	r1, CPSR
 920:	e38130c0 	orr	r3, r1, #192	; 0xc0
 924:	e129f003 	msr	CPSR_fc, r3
 928:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 92c:	e5123f97 	ldr	r3, [r2, #-3991]
 930:	e1a0c420 	mov	ip, r0, lsr #8
 934:	e3c33080 	bic	r3, r3, #128	; 0x80
 938:	e5023f97 	str	r3, [r2, #-3991]
 93c:	e5020f9f 	str	r0, [r2, #-3999]
 940:	e502cf9b 	str	ip, [r2, #-3995]
 944:	e5123f97 	ldr	r3, [r2, #-3991]
 948:	e3833080 	orr	r3, r3, #128	; 0x80
 94c:	e5023f97 	str	r3, [r2, #-3991]
 950:	e129f001 	msr	CPSR_fc, r1
 954:	e12fff1e 	bx	lr

00000958 <io_spi0_disable>:
 958:	e20000ff 	and	r0, r0, #255	; 0xff
 95c:	e10f1000 	mrs	r1, CPSR
 960:	e38130c0 	orr	r3, r1, #192	; 0xc0
 964:	e129f003 	msr	CPSR_fc, r3
 968:	e3a02001 	mov	r2, #1	; 0x1
 96c:	e1a02012 	mov	r2, r2, lsl r0
 970:	e3e00a0f 	mvn	r0, #61440	; 0xf000
 974:	e5103fc7 	ldr	r3, [r0, #-4039]
 978:	e1e02002 	mvn	r2, r2
 97c:	e0033002 	and	r3, r3, r2
 980:	e5003fc7 	str	r3, [r0, #-4039]
 984:	e129f001 	msr	CPSR_fc, r1
 988:	e12fff1e 	bx	lr

0000098c <io_spi0_speed>:
 98c:	e10f1000 	mrs	r1, CPSR
 990:	e38130c0 	orr	r3, r1, #192	; 0xc0
 994:	e129f003 	msr	CPSR_fc, r3
 998:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 99c:	e5020fcb 	str	r0, [r2, #-4043]
 9a0:	e129f001 	msr	CPSR_fc, r1
 9a4:	e12fff1e 	bx	lr

000009a8 <io_get_pwm>:
 9a8:	e20000ff 	and	r0, r0, #255	; 0xff
 9ac:	e10f2000 	mrs	r2, CPSR
 9b0:	e38230c0 	orr	r3, r2, #192	; 0xc0
 9b4:	e129f003 	msr	CPSR_fc, r3
 9b8:	e3500007 	cmp	r0, #7	; 0x7
 9bc:	e3a01000 	mov	r1, #0	; 0x0
 9c0:	8a00000b 	bhi	9f4 <io_get_pwm+0x4c>
 9c4:	e2403004 	sub	r3, r0, #4	; 0x4
 9c8:	e3500003 	cmp	r0, #3	; 0x3
 9cc:	e20310ff 	and	r1, r3, #255	; 0xff
 9d0:	9a000006 	bls	9f0 <io_get_pwm+0x48>
 9d4:	e3e03a0f 	mvn	r3, #61440	; 0xf000
 9d8:	e5130f8b 	ldr	r0, [r3, #-3979]
 9dc:	e1a01181 	mov	r1, r1, lsl #3
 9e0:	e129f002 	msr	CPSR_fc, r2
 9e4:	e1a00130 	mov	r0, r0, lsr r1
 9e8:	e20000ff 	and	r0, r0, #255	; 0xff
 9ec:	e12fff1e 	bx	lr
 9f0:	e1a01180 	mov	r1, r0, lsl #3
 9f4:	e3e03a0f 	mvn	r3, #61440	; 0xf000
 9f8:	e5130f8f 	ldr	r0, [r3, #-3983]
 9fc:	e129f002 	msr	CPSR_fc, r2
 a00:	e1a00130 	mov	r0, r0, lsr r1
 a04:	e20000ff 	and	r0, r0, #255	; 0xff
 a08:	e12fff1e 	bx	lr

00000a0c <io_set_pwm>:
 a0c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
 a10:	e20000ff 	and	r0, r0, #255	; 0xff
 a14:	e20140ff 	and	r4, r1, #255	; 0xff
 a18:	e10fc000 	mrs	ip, CPSR
 a1c:	e38c30c0 	orr	r3, ip, #192	; 0xc0
 a20:	e129f003 	msr	CPSR_fc, r3
 a24:	e3500007 	cmp	r0, #7	; 0x7
 a28:	e3a01000 	mov	r1, #0	; 0x0
 a2c:	e3e0e0ff 	mvn	lr, #255	; 0xff
 a30:	8a000012 	bhi	a80 <io_set_pwm+0x74>
 a34:	e2403004 	sub	r3, r0, #4	; 0x4
 a38:	e20330ff 	and	r3, r3, #255	; 0xff
 a3c:	e3500003 	cmp	r0, #3	; 0x3
 a40:	e1a0e183 	mov	lr, r3, lsl #3
 a44:	e3e05a0f 	mvn	r5, #61440	; 0xf000
 a48:	e1a01180 	mov	r1, r0, lsl #3
 a4c:	9a000008 	bls	a74 <io_set_pwm+0x68>
 a50:	e3a030ff 	mov	r3, #255	; 0xff
 a54:	e1a03e13 	mov	r3, r3, lsl lr
 a58:	e5152f8b 	ldr	r2, [r5, #-3979]
 a5c:	e1e03003 	mvn	r3, r3
 a60:	e0022003 	and	r2, r2, r3
 a64:	e1822e14 	orr	r2, r2, r4, lsl lr
 a68:	e5052f8b 	str	r2, [r5, #-3979]
 a6c:	e129f00c 	msr	CPSR_fc, ip
 a70:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
 a74:	e3a030ff 	mov	r3, #255	; 0xff
 a78:	e1a03113 	mov	r3, r3, lsl r1
 a7c:	e1e0e003 	mvn	lr, r3
 a80:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 a84:	e5123f8f 	ldr	r3, [r2, #-3983]
 a88:	e00e3003 	and	r3, lr, r3
 a8c:	e1833114 	orr	r3, r3, r4, lsl r1
 a90:	e5023f8f 	str	r3, [r2, #-3983]
 a94:	e129f00c 	msr	CPSR_fc, ip
 a98:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00000a9c <io_set_gpio0_port>:
 a9c:	e10f1000 	mrs	r1, CPSR
 aa0:	e38130c0 	orr	r3, r1, #192	; 0xc0
 aa4:	e129f003 	msr	CPSR_fc, r3
 aa8:	e3e02a0f 	mvn	r2, #61440	; 0xf000
 aac:	e5020fff 	str	r0, [r2, #-4095]
 ab0:	e129f001 	msr	CPSR_fc, r1
 ab4:	e12fff1e 	bx	lr

00000ab8 <io_toggle_gpio0_pin>:
 ab8:	e20000ff 	and	r0, r0, #255	; 0xff
 abc:	e10f1000 	mrs	r1, CPSR
 ac0:	e38130c0 	orr	r3, r1, #192	; 0xc0
 ac4:	e129f003 	msr	CPSR_fc, r3
 ac8:	e3e0ca0f 	mvn	ip, #61440	; 0xf000
 acc:	e51c3fff 	ldr	r3, [ip, #-4095]
 ad0:	e3a02001 	mov	r2, #1	; 0x1
 ad4:	e0233012 	eor	r3, r3, r2, lsl r0
 ad8:	e50c3fff 	str	r3, [ip, #-4095]
 adc:	e129f001 	msr	CPSR_fc, r1
 ae0:	e12fff1e 	bx	lr
 ae4:	0d0a0d0a 	stceq	13, cr0, [sl, #-40]
 ae8:	53544f52 	cmppl	r4, #328	; 0x148
 aec:	4d20536f 	stcmi	3, cr5, [r0, #-444]!
 af0:	43204261 	teqmi	r0, #268435462	; 0x10000006
 af4:	73696320 	cmnvc	r9, #-2147483648	; 0x80000000
 af8:	436f6e66 	cmnmi	pc, #1632	; 0x660
 afc:	69677572 	stmvsdb	r7!, {r1, r4, r5, r6, r8, sl, ip, sp, lr}^
 b00:	6174696f 	cmnvs	r4, pc, ror #18
 b04:	6e0d0a00 	fmacsvs	s0, s26, s0
 b08:	44656d6f 	strmibt	r6, [r5], #-3439
 b0c:	2070726f 	rsbcss	r7, r0, pc, ror #4
 b10:	6772616d 	ldrvsb	r6, [r2, -sp, ror #2]!
 b14:	0d0a0d0a 	stceq	13, cr0, [sl, #-40]
 b18:	00000000 	andeq	r0, r0, r0
 b1c:	50726573 	rsbpls	r6, r2, r3, ror r5
 b20:	7320616e 	teqvc	r0, #-2147483621	; 0x8000001b
 b24:	79206b65 	stmvcdb	r0!, {r0, r2, r5, r6, r8, r9, fp, sp, lr}
 b28:	79210d0a 	stmvcdb	r1!, {r1, r3, r8, sl, fp}
 b2c:	00000000 	andeq	r0, r0, r0
